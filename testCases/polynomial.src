class POLYNOMIAL {                                      
	public evaluate(float x) : float;
	public undefined() : void;                                          
  public integer a;
	public float a;                                                    
};

class A{};
                                                            

class LINEAR inherits POLYNOMIAL {
	private float a;
	private float b;
	private UNDECLARED undeclared;                                      
	
	public build(float A, float B) : LINEAR;
	public evaluate(float x) : float;
};

class C {
        private float a;
	public f(integer a): integer; 
};
class D inherits C {
        private float a;                                               
        public f(integer x): integer;                                   
        public f(float f): float;                                       
};

class QUADRATIC inherits POLYNOMIAL {
	private float a;
	private float b;
	private float c;
	
	public build(float A, float B, float C) : QUADRATIC;
	public evaluate(float x) : float;
};


LINEAR::f() : void                                                       
  local
    integer x;
  do
    x = 1;
    undeclared = 0;                                                 
    return (x);
  end

POLYNOMIAL::evaluate(float x) : float
  do
    return (0);
  end

LINEAR::evaluate(float x) : float
  local
    float result;
    integer result;                                                     
    float x;                                                            
  do
    result = 0.0;
    result = a * x + b;
    return (result);
  end
  
QUADRATIC::evaluate(float x) : float
  local
    float result;
  do    
    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  end
  
LINEAR::build(float A, float B) : LINEAR
  local
    LINEAR new_function;
  do
    new_function.a = A;
    new_function.b = B;
    new_function.undeclareddata = 1;                                    
    new_function.undeclaredfunction();                                  
    return (new_function);
  end  
  
QUADRATIC::build(float A, float B, float C) : QUADRATIC
  local
    QUADRATIC new_function;
  do
    new_function.a = A;
    new_function.b = B;
    new_function.c = C;
    return (new_function);
  end

f(integer p_arr[][][]): integer
  do
    return (2.5 + 3.5 * 8.8);                                              
  end

f(float x): integer                                                      
 do
   return (1);
 end
 

main
  local
    LINEAR f1;
    QUADRATIC f2;
    integer counter;
    integer arr[2][3];
  do
    f1 = f1.build(2, 3.5+2.3/4.2);                                       
    f2 = f2.build(-2.0, 1.0, 0.0);                                        
    f2 = f2.build(2,1,0);                                                
    f3();                                                                
    counter = 1;
    counter = arr[1][1][1];                                              
    counter = arr[2.5+3.2][1];                                              
    counter = f(arr);                                                    
    counter = 3.5 + 2.4 / 3.3;                                           
    while(counter <= 10)
      do
        write(counter);
        write(f1.evaluate(counter));
        write(f2.evaluate(counter));
      end;
  end---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
