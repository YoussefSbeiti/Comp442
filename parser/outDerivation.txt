---------------------------------------------------------------
currentStack['$', '<START>']. Token to read: LexToken(class,'class',2,39)
found rule to use: <START> ->  <prog> 
popping <START>adding ['<prog>'] to stack
---------------------------------------------------------------
currentStack['$', '<prog>']. Token to read: LexToken(class,'class',2,39)
found rule to use: <prog> ->  <rept-prog0> <rept-prog1> main <funcBody> 
popping <prog>adding ['<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>']. Token to read: LexToken(class,'class',2,39)
found rule to use: <rept-prog0> ->  <classDecl> <rept-prog0> 
popping <rept-prog0>adding ['<rept-prog0>', '<classDecl>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', '<classDecl>']. Token to read: LexToken(class,'class',2,39)
found rule to use: <classDecl> ->  class id <opt-classDecl2> LCB <rept-classDecl4> RCB SEMICOLON 
popping <classDecl>adding ['SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<opt-classDecl2>', 'id', 'class'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<opt-classDecl2>', 'id', 'class']. Token to read: LexToken(class,'class',2,39)
popping terminal class
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<opt-classDecl2>', 'id']. Token to read: LexToken(id,'POLYNOMIAL',2,45)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<opt-classDecl2>']. Token to read: LexToken(LCB,'{',2,56)
found rule to use: <opt-classDecl2> ->  EPSILON 
popping <opt-classDecl2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', 'EPSILON']. Token to read: LexToken(LCB,'{',2,56)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB']. Token to read: LexToken(LCB,'{',2,56)
popping terminal LCB
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>']. Token to read: LexToken(public,'public',3,59)
found rule to use: <rept-classDecl4> ->  <visibility> <memberDecl> <rept-classDecl4> 
popping <rept-classDecl4>adding ['<rept-classDecl4>', '<memberDecl>', '<visibility>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', '<visibility>']. Token to read: LexToken(public,'public',3,59)
found rule to use: <visibility> ->  public 
popping <visibility>adding ['public'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', 'public']. Token to read: LexToken(public,'public',3,59)
popping terminal public
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>']. Token to read: LexToken(id,'evaluate',3,66)
found rule to use: <memberDecl> ->  id <memberDeclLF> 
popping <memberDecl>adding ['<memberDeclLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDeclLF>', 'id']. Token to read: LexToken(id,'evaluate',3,66)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDeclLF>']. Token to read: LexToken(LPAREN,'(',3,74)
found rule to use: <memberDeclLF> ->  LPAREN <fParams> RPAREN COLON <funcDeclLF> 
popping <memberDeclLF>adding ['<funcDeclLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',3,74)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<fParams>']. Token to read: LexToken(float,'float',3,75)
found rule to use: <fParams> ->  <type> id <rept-fParams2> <rept-fParams3> 
popping <fParams>adding ['<rept-fParams3>', '<rept-fParams2>', 'id', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id', '<type>']. Token to read: LexToken(float,'float',3,75)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id', 'float']. Token to read: LexToken(float,'float',3,75)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id']. Token to read: LexToken(id,'x',3,81)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>']. Token to read: LexToken(RPAREN,')',3,82)
found rule to use: <rept-fParams2> ->  EPSILON 
popping <rept-fParams2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', 'EPSILON']. Token to read: LexToken(RPAREN,')',3,82)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>']. Token to read: LexToken(RPAREN,')',3,82)
found rule to use: <rept-fParams3> ->  EPSILON 
popping <rept-fParams3>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',3,82)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN']. Token to read: LexToken(RPAREN,')',3,82)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON']. Token to read: LexToken(COLON,':',3,84)
popping terminal COLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>']. Token to read: LexToken(float,'float',3,86)
found rule to use: <funcDeclLF> ->  <type> SEMICOLON 
popping <funcDeclLF>adding ['SEMICOLON', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<type>']. Token to read: LexToken(float,'float',3,86)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', 'float']. Token to read: LexToken(float,'float',3,86)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',3,91)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>']. Token to read: LexToken(RCB,'}',4,93)
found rule to use: <rept-classDecl4> ->  EPSILON 
popping <rept-classDecl4>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', 'EPSILON']. Token to read: LexToken(RCB,'}',4,93)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB']. Token to read: LexToken(RCB,'}',4,93)
popping terminal RCB
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',4,94)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>']. Token to read: LexToken(class,'class',6,97)
found rule to use: <rept-prog0> ->  <classDecl> <rept-prog0> 
popping <rept-prog0>adding ['<rept-prog0>', '<classDecl>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', '<classDecl>']. Token to read: LexToken(class,'class',6,97)
found rule to use: <classDecl> ->  class id <opt-classDecl2> LCB <rept-classDecl4> RCB SEMICOLON 
popping <classDecl>adding ['SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<opt-classDecl2>', 'id', 'class'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<opt-classDecl2>', 'id', 'class']. Token to read: LexToken(class,'class',6,97)
popping terminal class
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<opt-classDecl2>', 'id']. Token to read: LexToken(id,'LINEAR',6,103)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<opt-classDecl2>']. Token to read: LexToken(inherits,'inherits',6,110)
found rule to use: <opt-classDecl2> ->  inherits id <rept-opt-classDecl22> 
popping <opt-classDecl2>adding ['<rept-opt-classDecl22>', 'id', 'inherits'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<rept-opt-classDecl22>', 'id', 'inherits']. Token to read: LexToken(inherits,'inherits',6,110)
popping terminal inherits
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<rept-opt-classDecl22>', 'id']. Token to read: LexToken(id,'POLYNOMIAL',6,119)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<rept-opt-classDecl22>']. Token to read: LexToken(LCB,'{',6,130)
found rule to use: <rept-opt-classDecl22> ->  EPSILON 
popping <rept-opt-classDecl22>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', 'EPSILON']. Token to read: LexToken(LCB,'{',6,130)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB']. Token to read: LexToken(LCB,'{',6,130)
popping terminal LCB
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>']. Token to read: LexToken(private,'private',7,133)
found rule to use: <rept-classDecl4> ->  <visibility> <memberDecl> <rept-classDecl4> 
popping <rept-classDecl4>adding ['<rept-classDecl4>', '<memberDecl>', '<visibility>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', '<visibility>']. Token to read: LexToken(private,'private',7,133)
found rule to use: <visibility> ->  private 
popping <visibility>adding ['private'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', 'private']. Token to read: LexToken(private,'private',7,133)
popping terminal private
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>']. Token to read: LexToken(float,'float',7,141)
found rule to use: <memberDecl> ->  float id <rept-memberDecl2> SEMICOLON 
popping <memberDecl>adding ['SEMICOLON', '<rept-memberDecl2>', 'id', 'float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<rept-memberDecl2>', 'id', 'float']. Token to read: LexToken(float,'float',7,141)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<rept-memberDecl2>', 'id']. Token to read: LexToken(id,'a',7,147)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<rept-memberDecl2>']. Token to read: LexToken(SEMICOLON,';',7,148)
found rule to use: <rept-memberDecl2> ->  EPSILON 
popping <rept-memberDecl2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',7,148)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',7,148)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>']. Token to read: LexToken(private,'private',8,151)
found rule to use: <rept-classDecl4> ->  <visibility> <memberDecl> <rept-classDecl4> 
popping <rept-classDecl4>adding ['<rept-classDecl4>', '<memberDecl>', '<visibility>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', '<visibility>']. Token to read: LexToken(private,'private',8,151)
found rule to use: <visibility> ->  private 
popping <visibility>adding ['private'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', 'private']. Token to read: LexToken(private,'private',8,151)
popping terminal private
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>']. Token to read: LexToken(float,'float',8,159)
found rule to use: <memberDecl> ->  float id <rept-memberDecl2> SEMICOLON 
popping <memberDecl>adding ['SEMICOLON', '<rept-memberDecl2>', 'id', 'float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<rept-memberDecl2>', 'id', 'float']. Token to read: LexToken(float,'float',8,159)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<rept-memberDecl2>', 'id']. Token to read: LexToken(id,'b',8,165)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<rept-memberDecl2>']. Token to read: LexToken(DOT,'.',8,166)
