---------------------------------------------------------------
currentStack['$', '<START>']. Token to read: LexToken(class,'class',2,1)
found rule to use: <START> ->  <prog> 
popping <START>adding ['<prog>'] to stack
---------------------------------------------------------------
currentStack['$', '<prog>']. Token to read: LexToken(class,'class',2,1)
found rule to use: <prog> ->  <rept-prog0> <rept-prog1> main <funcBody> 
popping <prog>adding ['<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>']. Token to read: LexToken(class,'class',2,1)
found rule to use: <rept-prog0> ->  <classDecl> <rept-prog0> 
popping <rept-prog0>adding ['<rept-prog0>', '<classDecl>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', '<classDecl>']. Token to read: LexToken(class,'class',2,1)
found rule to use: <classDecl> ->  class id <opt-classDecl2> LCB <rept-classDecl4> RCB SEMICOLON 
popping <classDecl>adding ['SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<opt-classDecl2>', 'id', 'class'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<opt-classDecl2>', 'id', 'class']. Token to read: LexToken(class,'class',2,1)
popping terminal class
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<opt-classDecl2>', 'id']. Token to read: LexToken(id,'POLYNOMIAL',2,7)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<opt-classDecl2>']. Token to read: LexToken(LCB,'{',2,18)
found rule to use: <opt-classDecl2> ->  EPSILON 
popping <opt-classDecl2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', 'EPSILON']. Token to read: LexToken(LCB,'{',2,18)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB']. Token to read: LexToken(LCB,'{',2,18)
popping terminal LCB
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>']. Token to read: LexToken(public,'public',3,21)
found rule to use: <rept-classDecl4> ->  <visibility> <memberDecl> <rept-classDecl4> 
popping <rept-classDecl4>adding ['<rept-classDecl4>', '<memberDecl>', '<visibility>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', '<visibility>']. Token to read: LexToken(public,'public',3,21)
found rule to use: <visibility> ->  public 
popping <visibility>adding ['public'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', 'public']. Token to read: LexToken(public,'public',3,21)
popping terminal public
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>']. Token to read: LexToken(id,'evaluate',3,28)
found rule to use: <memberDecl> ->  id <memberDeclLF> 
popping <memberDecl>adding ['<memberDeclLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDeclLF>', 'id']. Token to read: LexToken(id,'evaluate',3,28)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDeclLF>']. Token to read: LexToken(LPAREN,'(',3,36)
found rule to use: <memberDeclLF> ->  LPAREN <fParams> RPAREN COLON <funcDeclLF> 
popping <memberDeclLF>adding ['<funcDeclLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',3,36)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<fParams>']. Token to read: LexToken(float,'float',3,37)
found rule to use: <fParams> ->  <type> id <rept-fParams2> <rept-fParams3> 
popping <fParams>adding ['<rept-fParams3>', '<rept-fParams2>', 'id', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id', '<type>']. Token to read: LexToken(float,'float',3,37)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id', 'float']. Token to read: LexToken(float,'float',3,37)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id']. Token to read: LexToken(id,'x',3,43)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>']. Token to read: LexToken(RPAREN,')',3,44)
found rule to use: <rept-fParams2> ->  EPSILON 
popping <rept-fParams2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', 'EPSILON']. Token to read: LexToken(RPAREN,')',3,44)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>']. Token to read: LexToken(RPAREN,')',3,44)
found rule to use: <rept-fParams3> ->  EPSILON 
popping <rept-fParams3>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',3,44)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN']. Token to read: LexToken(RPAREN,')',3,44)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON']. Token to read: LexToken(COLON,':',3,46)
popping terminal COLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>']. Token to read: LexToken(float,'float',3,48)
found rule to use: <funcDeclLF> ->  <type> SEMICOLON 
popping <funcDeclLF>adding ['SEMICOLON', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<type>']. Token to read: LexToken(float,'float',3,48)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', 'float']. Token to read: LexToken(float,'float',3,48)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',3,53)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>']. Token to read: LexToken(RCB,'}',4,55)
found rule to use: <rept-classDecl4> ->  EPSILON 
popping <rept-classDecl4>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', 'EPSILON']. Token to read: LexToken(RCB,'}',4,55)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB']. Token to read: LexToken(RCB,'}',4,55)
popping terminal RCB
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',4,56)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>']. Token to read: LexToken(class,'class',6,59)
found rule to use: <rept-prog0> ->  <classDecl> <rept-prog0> 
popping <rept-prog0>adding ['<rept-prog0>', '<classDecl>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', '<classDecl>']. Token to read: LexToken(class,'class',6,59)
found rule to use: <classDecl> ->  class id <opt-classDecl2> LCB <rept-classDecl4> RCB SEMICOLON 
popping <classDecl>adding ['SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<opt-classDecl2>', 'id', 'class'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<opt-classDecl2>', 'id', 'class']. Token to read: LexToken(class,'class',6,59)
popping terminal class
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<opt-classDecl2>', 'id']. Token to read: LexToken(id,'LINEAR',6,65)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<opt-classDecl2>']. Token to read: LexToken(inherits,'inherits',6,72)
found rule to use: <opt-classDecl2> ->  inherits id <rept-opt-classDecl22> 
popping <opt-classDecl2>adding ['<rept-opt-classDecl22>', 'id', 'inherits'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<rept-opt-classDecl22>', 'id', 'inherits']. Token to read: LexToken(inherits,'inherits',6,72)
popping terminal inherits
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<rept-opt-classDecl22>', 'id']. Token to read: LexToken(id,'POLYNOMIAL',6,81)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<rept-opt-classDecl22>']. Token to read: LexToken(LCB,'{',6,92)
found rule to use: <rept-opt-classDecl22> ->  EPSILON 
popping <rept-opt-classDecl22>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', 'EPSILON']. Token to read: LexToken(LCB,'{',6,92)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB']. Token to read: LexToken(LCB,'{',6,92)
popping terminal LCB
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>']. Token to read: LexToken(private,'private',7,95)
found rule to use: <rept-classDecl4> ->  <visibility> <memberDecl> <rept-classDecl4> 
popping <rept-classDecl4>adding ['<rept-classDecl4>', '<memberDecl>', '<visibility>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', '<visibility>']. Token to read: LexToken(private,'private',7,95)
found rule to use: <visibility> ->  private 
popping <visibility>adding ['private'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', 'private']. Token to read: LexToken(private,'private',7,95)
popping terminal private
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>']. Token to read: LexToken(float,'float',7,103)
found rule to use: <memberDecl> ->  float id <rept-memberDecl2> SEMICOLON 
popping <memberDecl>adding ['SEMICOLON', '<rept-memberDecl2>', 'id', 'float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<rept-memberDecl2>', 'id', 'float']. Token to read: LexToken(float,'float',7,103)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<rept-memberDecl2>', 'id']. Token to read: LexToken(id,'a',7,109)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<rept-memberDecl2>']. Token to read: LexToken(SEMICOLON,';',7,110)
found rule to use: <rept-memberDecl2> ->  EPSILON 
popping <rept-memberDecl2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',7,110)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',7,110)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>']. Token to read: LexToken(private,'private',8,113)
found rule to use: <rept-classDecl4> ->  <visibility> <memberDecl> <rept-classDecl4> 
popping <rept-classDecl4>adding ['<rept-classDecl4>', '<memberDecl>', '<visibility>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', '<visibility>']. Token to read: LexToken(private,'private',8,113)
found rule to use: <visibility> ->  private 
popping <visibility>adding ['private'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', 'private']. Token to read: LexToken(private,'private',8,113)
popping terminal private
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>']. Token to read: LexToken(float,'float',8,121)
found rule to use: <memberDecl> ->  float id <rept-memberDecl2> SEMICOLON 
popping <memberDecl>adding ['SEMICOLON', '<rept-memberDecl2>', 'id', 'float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<rept-memberDecl2>', 'id', 'float']. Token to read: LexToken(float,'float',8,121)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<rept-memberDecl2>', 'id']. Token to read: LexToken(id,'b',8,127)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<rept-memberDecl2>']. Token to read: LexToken(SEMICOLON,';',8,128)
found rule to use: <rept-memberDecl2> ->  EPSILON 
popping <rept-memberDecl2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',8,128)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',8,128)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>']. Token to read: LexToken(public,'public',10,133)
found rule to use: <rept-classDecl4> ->  <visibility> <memberDecl> <rept-classDecl4> 
popping <rept-classDecl4>adding ['<rept-classDecl4>', '<memberDecl>', '<visibility>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', '<visibility>']. Token to read: LexToken(public,'public',10,133)
found rule to use: <visibility> ->  public 
popping <visibility>adding ['public'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', 'public']. Token to read: LexToken(public,'public',10,133)
popping terminal public
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>']. Token to read: LexToken(id,'build',10,140)
found rule to use: <memberDecl> ->  id <memberDeclLF> 
popping <memberDecl>adding ['<memberDeclLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDeclLF>', 'id']. Token to read: LexToken(id,'build',10,140)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDeclLF>']. Token to read: LexToken(LPAREN,'(',10,145)
found rule to use: <memberDeclLF> ->  LPAREN <fParams> RPAREN COLON <funcDeclLF> 
popping <memberDeclLF>adding ['<funcDeclLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',10,145)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<fParams>']. Token to read: LexToken(float,'float',10,146)
found rule to use: <fParams> ->  <type> id <rept-fParams2> <rept-fParams3> 
popping <fParams>adding ['<rept-fParams3>', '<rept-fParams2>', 'id', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id', '<type>']. Token to read: LexToken(float,'float',10,146)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id', 'float']. Token to read: LexToken(float,'float',10,146)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id']. Token to read: LexToken(id,'A',10,152)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>']. Token to read: LexToken(COMMA,',',10,153)
found rule to use: <rept-fParams2> ->  EPSILON 
popping <rept-fParams2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', 'EPSILON']. Token to read: LexToken(COMMA,',',10,153)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>']. Token to read: LexToken(COMMA,',',10,153)
found rule to use: <rept-fParams3> ->  <fParamsTail> <rept-fParams3> 
popping <rept-fParams3>adding ['<rept-fParams3>', '<fParamsTail>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<fParamsTail>']. Token to read: LexToken(COMMA,',',10,153)
found rule to use: <fParamsTail> ->  COMMA <type> id <rept-fParamsTail3> 
popping <fParamsTail>adding ['<rept-fParamsTail3>', 'id', '<type>', 'COMMA'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id', '<type>', 'COMMA']. Token to read: LexToken(COMMA,',',10,153)
popping terminal COMMA
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id', '<type>']. Token to read: LexToken(float,'float',10,155)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id', 'float']. Token to read: LexToken(float,'float',10,155)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id']. Token to read: LexToken(id,'B',10,161)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>']. Token to read: LexToken(RPAREN,')',10,162)
found rule to use: <rept-fParamsTail3> ->  EPSILON 
popping <rept-fParamsTail3>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', 'EPSILON']. Token to read: LexToken(RPAREN,')',10,162)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>']. Token to read: LexToken(RPAREN,')',10,162)
found rule to use: <rept-fParams3> ->  EPSILON 
popping <rept-fParams3>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',10,162)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN']. Token to read: LexToken(RPAREN,')',10,162)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON']. Token to read: LexToken(COLON,':',10,164)
popping terminal COLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>']. Token to read: LexToken(id,'LINEAR',10,166)
found rule to use: <funcDeclLF> ->  <type> SEMICOLON 
popping <funcDeclLF>adding ['SEMICOLON', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<type>']. Token to read: LexToken(id,'LINEAR',10,166)
found rule to use: <type> ->  id 
popping <type>adding ['id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', 'id']. Token to read: LexToken(id,'LINEAR',10,166)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',10,172)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>']. Token to read: LexToken(public,'public',11,175)
found rule to use: <rept-classDecl4> ->  <visibility> <memberDecl> <rept-classDecl4> 
popping <rept-classDecl4>adding ['<rept-classDecl4>', '<memberDecl>', '<visibility>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', '<visibility>']. Token to read: LexToken(public,'public',11,175)
found rule to use: <visibility> ->  public 
popping <visibility>adding ['public'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', 'public']. Token to read: LexToken(public,'public',11,175)
popping terminal public
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>']. Token to read: LexToken(id,'evaluate',11,182)
found rule to use: <memberDecl> ->  id <memberDeclLF> 
popping <memberDecl>adding ['<memberDeclLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDeclLF>', 'id']. Token to read: LexToken(id,'evaluate',11,182)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDeclLF>']. Token to read: LexToken(LPAREN,'(',11,190)
found rule to use: <memberDeclLF> ->  LPAREN <fParams> RPAREN COLON <funcDeclLF> 
popping <memberDeclLF>adding ['<funcDeclLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',11,190)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<fParams>']. Token to read: LexToken(float,'float',11,191)
found rule to use: <fParams> ->  <type> id <rept-fParams2> <rept-fParams3> 
popping <fParams>adding ['<rept-fParams3>', '<rept-fParams2>', 'id', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id', '<type>']. Token to read: LexToken(float,'float',11,191)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id', 'float']. Token to read: LexToken(float,'float',11,191)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id']. Token to read: LexToken(id,'x',11,197)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>']. Token to read: LexToken(RPAREN,')',11,198)
found rule to use: <rept-fParams2> ->  EPSILON 
popping <rept-fParams2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', 'EPSILON']. Token to read: LexToken(RPAREN,')',11,198)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>']. Token to read: LexToken(RPAREN,')',11,198)
found rule to use: <rept-fParams3> ->  EPSILON 
popping <rept-fParams3>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',11,198)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN']. Token to read: LexToken(RPAREN,')',11,198)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON']. Token to read: LexToken(COLON,':',11,200)
popping terminal COLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>']. Token to read: LexToken(float,'float',11,202)
found rule to use: <funcDeclLF> ->  <type> SEMICOLON 
popping <funcDeclLF>adding ['SEMICOLON', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<type>']. Token to read: LexToken(float,'float',11,202)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', 'float']. Token to read: LexToken(float,'float',11,202)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',11,207)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>']. Token to read: LexToken(RCB,'}',12,209)
found rule to use: <rept-classDecl4> ->  EPSILON 
popping <rept-classDecl4>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', 'EPSILON']. Token to read: LexToken(RCB,'}',12,209)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB']. Token to read: LexToken(RCB,'}',12,209)
popping terminal RCB
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',12,210)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>']. Token to read: LexToken(class,'class',14,213)
found rule to use: <rept-prog0> ->  <classDecl> <rept-prog0> 
popping <rept-prog0>adding ['<rept-prog0>', '<classDecl>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', '<classDecl>']. Token to read: LexToken(class,'class',14,213)
found rule to use: <classDecl> ->  class id <opt-classDecl2> LCB <rept-classDecl4> RCB SEMICOLON 
popping <classDecl>adding ['SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<opt-classDecl2>', 'id', 'class'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<opt-classDecl2>', 'id', 'class']. Token to read: LexToken(class,'class',14,213)
popping terminal class
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<opt-classDecl2>', 'id']. Token to read: LexToken(id,'QUADRATIC',14,219)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<opt-classDecl2>']. Token to read: LexToken(inherits,'inherits',14,229)
found rule to use: <opt-classDecl2> ->  inherits id <rept-opt-classDecl22> 
popping <opt-classDecl2>adding ['<rept-opt-classDecl22>', 'id', 'inherits'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<rept-opt-classDecl22>', 'id', 'inherits']. Token to read: LexToken(inherits,'inherits',14,229)
popping terminal inherits
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<rept-opt-classDecl22>', 'id']. Token to read: LexToken(id,'POLYNOMIAL',14,238)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', '<rept-opt-classDecl22>']. Token to read: LexToken(LCB,'{',14,249)
found rule to use: <rept-opt-classDecl22> ->  EPSILON 
popping <rept-opt-classDecl22>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB', 'EPSILON']. Token to read: LexToken(LCB,'{',14,249)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'LCB']. Token to read: LexToken(LCB,'{',14,249)
popping terminal LCB
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>']. Token to read: LexToken(private,'private',15,252)
found rule to use: <rept-classDecl4> ->  <visibility> <memberDecl> <rept-classDecl4> 
popping <rept-classDecl4>adding ['<rept-classDecl4>', '<memberDecl>', '<visibility>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', '<visibility>']. Token to read: LexToken(private,'private',15,252)
found rule to use: <visibility> ->  private 
popping <visibility>adding ['private'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', 'private']. Token to read: LexToken(private,'private',15,252)
popping terminal private
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>']. Token to read: LexToken(float,'float',15,260)
found rule to use: <memberDecl> ->  float id <rept-memberDecl2> SEMICOLON 
popping <memberDecl>adding ['SEMICOLON', '<rept-memberDecl2>', 'id', 'float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<rept-memberDecl2>', 'id', 'float']. Token to read: LexToken(float,'float',15,260)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<rept-memberDecl2>', 'id']. Token to read: LexToken(id,'a',15,266)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<rept-memberDecl2>']. Token to read: LexToken(SEMICOLON,';',15,267)
found rule to use: <rept-memberDecl2> ->  EPSILON 
popping <rept-memberDecl2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',15,267)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',15,267)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>']. Token to read: LexToken(private,'private',16,270)
found rule to use: <rept-classDecl4> ->  <visibility> <memberDecl> <rept-classDecl4> 
popping <rept-classDecl4>adding ['<rept-classDecl4>', '<memberDecl>', '<visibility>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', '<visibility>']. Token to read: LexToken(private,'private',16,270)
found rule to use: <visibility> ->  private 
popping <visibility>adding ['private'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', 'private']. Token to read: LexToken(private,'private',16,270)
popping terminal private
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>']. Token to read: LexToken(float,'float',16,278)
found rule to use: <memberDecl> ->  float id <rept-memberDecl2> SEMICOLON 
popping <memberDecl>adding ['SEMICOLON', '<rept-memberDecl2>', 'id', 'float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<rept-memberDecl2>', 'id', 'float']. Token to read: LexToken(float,'float',16,278)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<rept-memberDecl2>', 'id']. Token to read: LexToken(id,'b',16,284)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<rept-memberDecl2>']. Token to read: LexToken(SEMICOLON,';',16,285)
found rule to use: <rept-memberDecl2> ->  EPSILON 
popping <rept-memberDecl2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',16,285)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',16,285)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>']. Token to read: LexToken(private,'private',17,288)
found rule to use: <rept-classDecl4> ->  <visibility> <memberDecl> <rept-classDecl4> 
popping <rept-classDecl4>adding ['<rept-classDecl4>', '<memberDecl>', '<visibility>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', '<visibility>']. Token to read: LexToken(private,'private',17,288)
found rule to use: <visibility> ->  private 
popping <visibility>adding ['private'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', 'private']. Token to read: LexToken(private,'private',17,288)
popping terminal private
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>']. Token to read: LexToken(float,'float',17,296)
found rule to use: <memberDecl> ->  float id <rept-memberDecl2> SEMICOLON 
popping <memberDecl>adding ['SEMICOLON', '<rept-memberDecl2>', 'id', 'float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<rept-memberDecl2>', 'id', 'float']. Token to read: LexToken(float,'float',17,296)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<rept-memberDecl2>', 'id']. Token to read: LexToken(id,'c',17,302)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<rept-memberDecl2>']. Token to read: LexToken(SEMICOLON,';',17,303)
found rule to use: <rept-memberDecl2> ->  EPSILON 
popping <rept-memberDecl2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',17,303)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',17,303)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>']. Token to read: LexToken(public,'public',19,308)
found rule to use: <rept-classDecl4> ->  <visibility> <memberDecl> <rept-classDecl4> 
popping <rept-classDecl4>adding ['<rept-classDecl4>', '<memberDecl>', '<visibility>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', '<visibility>']. Token to read: LexToken(public,'public',19,308)
found rule to use: <visibility> ->  public 
popping <visibility>adding ['public'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', 'public']. Token to read: LexToken(public,'public',19,308)
popping terminal public
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>']. Token to read: LexToken(id,'build',19,315)
found rule to use: <memberDecl> ->  id <memberDeclLF> 
popping <memberDecl>adding ['<memberDeclLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDeclLF>', 'id']. Token to read: LexToken(id,'build',19,315)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDeclLF>']. Token to read: LexToken(LPAREN,'(',19,320)
found rule to use: <memberDeclLF> ->  LPAREN <fParams> RPAREN COLON <funcDeclLF> 
popping <memberDeclLF>adding ['<funcDeclLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',19,320)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<fParams>']. Token to read: LexToken(float,'float',19,321)
found rule to use: <fParams> ->  <type> id <rept-fParams2> <rept-fParams3> 
popping <fParams>adding ['<rept-fParams3>', '<rept-fParams2>', 'id', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id', '<type>']. Token to read: LexToken(float,'float',19,321)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id', 'float']. Token to read: LexToken(float,'float',19,321)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id']. Token to read: LexToken(id,'A',19,327)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>']. Token to read: LexToken(COMMA,',',19,328)
found rule to use: <rept-fParams2> ->  EPSILON 
popping <rept-fParams2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', 'EPSILON']. Token to read: LexToken(COMMA,',',19,328)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>']. Token to read: LexToken(COMMA,',',19,328)
found rule to use: <rept-fParams3> ->  <fParamsTail> <rept-fParams3> 
popping <rept-fParams3>adding ['<rept-fParams3>', '<fParamsTail>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<fParamsTail>']. Token to read: LexToken(COMMA,',',19,328)
found rule to use: <fParamsTail> ->  COMMA <type> id <rept-fParamsTail3> 
popping <fParamsTail>adding ['<rept-fParamsTail3>', 'id', '<type>', 'COMMA'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id', '<type>', 'COMMA']. Token to read: LexToken(COMMA,',',19,328)
popping terminal COMMA
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id', '<type>']. Token to read: LexToken(float,'float',19,330)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id', 'float']. Token to read: LexToken(float,'float',19,330)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id']. Token to read: LexToken(id,'B',19,336)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>']. Token to read: LexToken(COMMA,',',19,337)
found rule to use: <rept-fParamsTail3> ->  EPSILON 
popping <rept-fParamsTail3>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', 'EPSILON']. Token to read: LexToken(COMMA,',',19,337)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>']. Token to read: LexToken(COMMA,',',19,337)
found rule to use: <rept-fParams3> ->  <fParamsTail> <rept-fParams3> 
popping <rept-fParams3>adding ['<rept-fParams3>', '<fParamsTail>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<fParamsTail>']. Token to read: LexToken(COMMA,',',19,337)
found rule to use: <fParamsTail> ->  COMMA <type> id <rept-fParamsTail3> 
popping <fParamsTail>adding ['<rept-fParamsTail3>', 'id', '<type>', 'COMMA'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id', '<type>', 'COMMA']. Token to read: LexToken(COMMA,',',19,337)
popping terminal COMMA
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id', '<type>']. Token to read: LexToken(float,'float',19,339)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id', 'float']. Token to read: LexToken(float,'float',19,339)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id']. Token to read: LexToken(id,'C',19,345)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>']. Token to read: LexToken(RPAREN,')',19,346)
found rule to use: <rept-fParamsTail3> ->  EPSILON 
popping <rept-fParamsTail3>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', 'EPSILON']. Token to read: LexToken(RPAREN,')',19,346)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>']. Token to read: LexToken(RPAREN,')',19,346)
found rule to use: <rept-fParams3> ->  EPSILON 
popping <rept-fParams3>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',19,346)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN']. Token to read: LexToken(RPAREN,')',19,346)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON']. Token to read: LexToken(COLON,':',19,348)
popping terminal COLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>']. Token to read: LexToken(id,'QUADRATIC',19,350)
found rule to use: <funcDeclLF> ->  <type> SEMICOLON 
popping <funcDeclLF>adding ['SEMICOLON', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<type>']. Token to read: LexToken(id,'QUADRATIC',19,350)
found rule to use: <type> ->  id 
popping <type>adding ['id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', 'id']. Token to read: LexToken(id,'QUADRATIC',19,350)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',19,359)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>']. Token to read: LexToken(public,'public',20,362)
found rule to use: <rept-classDecl4> ->  <visibility> <memberDecl> <rept-classDecl4> 
popping <rept-classDecl4>adding ['<rept-classDecl4>', '<memberDecl>', '<visibility>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', '<visibility>']. Token to read: LexToken(public,'public',20,362)
found rule to use: <visibility> ->  public 
popping <visibility>adding ['public'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>', 'public']. Token to read: LexToken(public,'public',20,362)
popping terminal public
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDecl>']. Token to read: LexToken(id,'evaluate',20,369)
found rule to use: <memberDecl> ->  id <memberDeclLF> 
popping <memberDecl>adding ['<memberDeclLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDeclLF>', 'id']. Token to read: LexToken(id,'evaluate',20,369)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<memberDeclLF>']. Token to read: LexToken(LPAREN,'(',20,377)
found rule to use: <memberDeclLF> ->  LPAREN <fParams> RPAREN COLON <funcDeclLF> 
popping <memberDeclLF>adding ['<funcDeclLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',20,377)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<fParams>']. Token to read: LexToken(float,'float',20,378)
found rule to use: <fParams> ->  <type> id <rept-fParams2> <rept-fParams3> 
popping <fParams>adding ['<rept-fParams3>', '<rept-fParams2>', 'id', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id', '<type>']. Token to read: LexToken(float,'float',20,378)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id', 'float']. Token to read: LexToken(float,'float',20,378)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id']. Token to read: LexToken(id,'x',20,384)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>']. Token to read: LexToken(RPAREN,')',20,385)
found rule to use: <rept-fParams2> ->  EPSILON 
popping <rept-fParams2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>', 'EPSILON']. Token to read: LexToken(RPAREN,')',20,385)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', '<rept-fParams3>']. Token to read: LexToken(RPAREN,')',20,385)
found rule to use: <rept-fParams3> ->  EPSILON 
popping <rept-fParams3>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',20,385)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON', 'RPAREN']. Token to read: LexToken(RPAREN,')',20,385)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>', 'COLON']. Token to read: LexToken(COLON,':',20,387)
popping terminal COLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', '<funcDeclLF>']. Token to read: LexToken(float,'float',20,389)
found rule to use: <funcDeclLF> ->  <type> SEMICOLON 
popping <funcDeclLF>adding ['SEMICOLON', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', '<type>']. Token to read: LexToken(float,'float',20,389)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON', 'float']. Token to read: LexToken(float,'float',20,389)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',20,394)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', '<rept-classDecl4>']. Token to read: LexToken(RCB,'}',21,396)
found rule to use: <rept-classDecl4> ->  EPSILON 
popping <rept-classDecl4>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB', 'EPSILON']. Token to read: LexToken(RCB,'}',21,396)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON', 'RCB']. Token to read: LexToken(RCB,'}',21,396)
popping terminal RCB
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',21,397)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<rept-prog0>']. Token to read: LexToken(id,'POLYNOMIAL',23,400)
found rule to use: <rept-prog0> ->  EPSILON 
popping <rept-prog0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'EPSILON']. Token to read: LexToken(id,'POLYNOMIAL',23,400)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>']. Token to read: LexToken(id,'POLYNOMIAL',23,400)
found rule to use: <rept-prog1> ->  <funcDef> <rept-prog1> 
popping <rept-prog1>adding ['<rept-prog1>', '<funcDef>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcDef>']. Token to read: LexToken(id,'POLYNOMIAL',23,400)
found rule to use: <funcDef> ->  <funcHead> <funcBody> 
popping <funcDef>adding ['<funcBody>', '<funcHead>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHead>']. Token to read: LexToken(id,'POLYNOMIAL',23,400)
found rule to use: <funcHead> ->  <funcHead0> LPAREN <fParams> RPAREN COLON <funcHeadLF> 
popping <funcHead>adding ['<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', '<funcHead0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', '<funcHead0>']. Token to read: LexToken(id,'POLYNOMIAL',23,400)
found rule to use: <funcHead0> ->  id <funcHead0LF> 
popping <funcHead0>adding ['<funcHead0LF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', '<funcHead0LF>', 'id']. Token to read: LexToken(id,'POLYNOMIAL',23,400)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', '<funcHead0LF>']. Token to read: LexToken(DOUBLECOLON,'::',23,410)
found rule to use: <funcHead0LF> ->  DOUBLECOLON id 
popping <funcHead0LF>adding ['id', 'DOUBLECOLON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', 'id', 'DOUBLECOLON']. Token to read: LexToken(DOUBLECOLON,'::',23,410)
popping terminal DOUBLECOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', 'id']. Token to read: LexToken(id,'evaluate',23,412)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',23,420)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>']. Token to read: LexToken(float,'float',23,421)
found rule to use: <fParams> ->  <type> id <rept-fParams2> <rept-fParams3> 
popping <fParams>adding ['<rept-fParams3>', '<rept-fParams2>', 'id', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id', '<type>']. Token to read: LexToken(float,'float',23,421)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id', 'float']. Token to read: LexToken(float,'float',23,421)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id']. Token to read: LexToken(id,'x',23,427)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>']. Token to read: LexToken(RPAREN,')',23,428)
found rule to use: <rept-fParams2> ->  EPSILON 
popping <rept-fParams2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', 'EPSILON']. Token to read: LexToken(RPAREN,')',23,428)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>']. Token to read: LexToken(RPAREN,')',23,428)
found rule to use: <rept-fParams3> ->  EPSILON 
popping <rept-fParams3>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',23,428)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN']. Token to read: LexToken(RPAREN,')',23,428)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON']. Token to read: LexToken(COLON,':',23,430)
popping terminal COLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>']. Token to read: LexToken(float,'float',23,432)
found rule to use: <funcHeadLF> ->  <type> 
popping <funcHeadLF>adding ['<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<type>']. Token to read: LexToken(float,'float',23,432)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', 'float']. Token to read: LexToken(float,'float',23,432)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>']. Token to read: LexToken(do,'do',24,440)
found rule to use: <funcBody> ->  <opt-funcBody0> do <rept-funcBody2> end 
popping <funcBody>adding ['end', '<rept-funcBody2>', 'do', '<opt-funcBody0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<opt-funcBody0>']. Token to read: LexToken(do,'do',24,440)
found rule to use: <opt-funcBody0> ->  EPSILON 
popping <opt-funcBody0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', 'EPSILON']. Token to read: LexToken(do,'do',24,440)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do']. Token to read: LexToken(do,'do',24,440)
popping terminal do
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>']. Token to read: LexToken(return,'return',25,447)
found rule to use: <rept-funcBody2> ->  <statement> <rept-funcBody2> 
popping <rept-funcBody2>adding ['<rept-funcBody2>', '<statement>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statement>']. Token to read: LexToken(return,'return',25,447)
found rule to use: <statement> ->  return LPAREN <expr> RPAREN SEMICOLON 
popping <statement>adding ['SEMICOLON', 'RPAREN', '<expr>', 'LPAREN', 'return'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<expr>', 'LPAREN', 'return']. Token to read: LexToken(return,'return',25,447)
popping terminal return
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<expr>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',25,454)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<expr>']. Token to read: LexToken(intNum,'0',25,455)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<arithExpr>']. Token to read: LexToken(intNum,'0',25,455)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(intNum,'0',25,455)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(intNum,'0',25,455)
found rule to use: <factor> ->  intNum 
popping <factor>adding ['intNum'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'intNum']. Token to read: LexToken(intNum,'0',25,455)
popping terminal intNum
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(RPAREN,')',25,456)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(RPAREN,')',25,456)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(RPAREN,')',25,456)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', 'EPSILON']. Token to read: LexToken(RPAREN,')',25,456)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>']. Token to read: LexToken(RPAREN,')',25,456)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',25,456)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN']. Token to read: LexToken(RPAREN,')',25,456)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',25,457)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>']. Token to read: LexToken(end,'end',26,461)
found rule to use: <rept-funcBody2> ->  EPSILON 
popping <rept-funcBody2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', 'EPSILON']. Token to read: LexToken(end,'end',26,461)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end']. Token to read: LexToken(end,'end',26,461)
popping terminal end
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>']. Token to read: LexToken(id,'LINEAR',28,466)
found rule to use: <rept-prog1> ->  <funcDef> <rept-prog1> 
popping <rept-prog1>adding ['<rept-prog1>', '<funcDef>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcDef>']. Token to read: LexToken(id,'LINEAR',28,466)
found rule to use: <funcDef> ->  <funcHead> <funcBody> 
popping <funcDef>adding ['<funcBody>', '<funcHead>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHead>']. Token to read: LexToken(id,'LINEAR',28,466)
found rule to use: <funcHead> ->  <funcHead0> LPAREN <fParams> RPAREN COLON <funcHeadLF> 
popping <funcHead>adding ['<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', '<funcHead0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', '<funcHead0>']. Token to read: LexToken(id,'LINEAR',28,466)
found rule to use: <funcHead0> ->  id <funcHead0LF> 
popping <funcHead0>adding ['<funcHead0LF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', '<funcHead0LF>', 'id']. Token to read: LexToken(id,'LINEAR',28,466)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', '<funcHead0LF>']. Token to read: LexToken(DOUBLECOLON,'::',28,472)
found rule to use: <funcHead0LF> ->  DOUBLECOLON id 
popping <funcHead0LF>adding ['id', 'DOUBLECOLON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', 'id', 'DOUBLECOLON']. Token to read: LexToken(DOUBLECOLON,'::',28,472)
popping terminal DOUBLECOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', 'id']. Token to read: LexToken(id,'evaluate',28,474)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',28,482)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>']. Token to read: LexToken(float,'float',28,483)
found rule to use: <fParams> ->  <type> id <rept-fParams2> <rept-fParams3> 
popping <fParams>adding ['<rept-fParams3>', '<rept-fParams2>', 'id', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id', '<type>']. Token to read: LexToken(float,'float',28,483)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id', 'float']. Token to read: LexToken(float,'float',28,483)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id']. Token to read: LexToken(id,'x',28,489)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>']. Token to read: LexToken(RPAREN,')',28,490)
found rule to use: <rept-fParams2> ->  EPSILON 
popping <rept-fParams2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', 'EPSILON']. Token to read: LexToken(RPAREN,')',28,490)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>']. Token to read: LexToken(RPAREN,')',28,490)
found rule to use: <rept-fParams3> ->  EPSILON 
popping <rept-fParams3>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',28,490)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN']. Token to read: LexToken(RPAREN,')',28,490)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON']. Token to read: LexToken(COLON,':',28,492)
popping terminal COLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>']. Token to read: LexToken(float,'float',28,494)
found rule to use: <funcHeadLF> ->  <type> 
popping <funcHeadLF>adding ['<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<type>']. Token to read: LexToken(float,'float',28,494)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', 'float']. Token to read: LexToken(float,'float',28,494)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>']. Token to read: LexToken(local,'local',29,502)
found rule to use: <funcBody> ->  <opt-funcBody0> do <rept-funcBody2> end 
popping <funcBody>adding ['end', '<rept-funcBody2>', 'do', '<opt-funcBody0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<opt-funcBody0>']. Token to read: LexToken(local,'local',29,502)
found rule to use: <opt-funcBody0> ->  local <rept-opt-funcBody01> 
popping <opt-funcBody0>adding ['<rept-opt-funcBody01>', 'local'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'local']. Token to read: LexToken(local,'local',29,502)
popping terminal local
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>']. Token to read: LexToken(float,'float',30,512)
found rule to use: <rept-opt-funcBody01> ->  <varDecl> <rept-opt-funcBody01> 
popping <rept-opt-funcBody01>adding ['<rept-opt-funcBody01>', '<varDecl>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', '<varDecl>']. Token to read: LexToken(float,'float',30,512)
found rule to use: <varDecl> ->  <type> id <rept-varDecl2> SEMICOLON 
popping <varDecl>adding ['SEMICOLON', '<rept-varDecl2>', 'id', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>', 'id', '<type>']. Token to read: LexToken(float,'float',30,512)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>', 'id', 'float']. Token to read: LexToken(float,'float',30,512)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>', 'id']. Token to read: LexToken(id,'result',30,518)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>']. Token to read: LexToken(SEMICOLON,';',30,524)
found rule to use: <rept-varDecl2> ->  EPSILON 
popping <rept-varDecl2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',30,524)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',30,524)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>']. Token to read: LexToken(do,'do',31,528)
found rule to use: <rept-opt-funcBody01> ->  EPSILON 
popping <rept-opt-funcBody01>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', 'EPSILON']. Token to read: LexToken(do,'do',31,528)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do']. Token to read: LexToken(do,'do',31,528)
popping terminal do
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>']. Token to read: LexToken(id,'result',32,535)
found rule to use: <rept-funcBody2> ->  <statement> <rept-funcBody2> 
popping <rept-funcBody2>adding ['<rept-funcBody2>', '<statement>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statement>']. Token to read: LexToken(id,'result',32,535)
found rule to use: <statement> ->  <idnestid> <statementLF> 
popping <statement>adding ['<statementLF>', '<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestid>']. Token to read: LexToken(id,'result',32,535)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>', 'id']. Token to read: LexToken(id,'result',32,535)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>']. Token to read: LexToken(ASSIGN,'=',32,542)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>']. Token to read: LexToken(ASSIGN,'=',32,542)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', 'EPSILON']. Token to read: LexToken(ASSIGN,'=',32,542)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>']. Token to read: LexToken(ASSIGN,'=',32,542)
found rule to use: <statementLF> ->  <assignOp> <expr> SEMICOLON 
popping <statementLF>adding ['SEMICOLON', '<expr>', '<assignOp>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', '<assignOp>']. Token to read: LexToken(ASSIGN,'=',32,542)
found rule to use: <assignOp> ->  ASSIGN 
popping <assignOp>adding ['ASSIGN'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', 'ASSIGN']. Token to read: LexToken(ASSIGN,'=',32,542)
popping terminal ASSIGN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>']. Token to read: LexToken(floatNum,'0.0',32,544)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<arithExpr>']. Token to read: LexToken(floatNum,'0.0',32,544)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(floatNum,'0.0',32,544)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(floatNum,'0.0',32,544)
found rule to use: <factor> ->  floatNum 
popping <factor>adding ['floatNum'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'floatNum']. Token to read: LexToken(floatNum,'0.0',32,544)
popping terminal floatNum
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(SEMICOLON,';',32,547)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',32,547)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(SEMICOLON,';',32,547)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',32,547)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>']. Token to read: LexToken(SEMICOLON,';',32,547)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',32,547)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',32,547)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>']. Token to read: LexToken(id,'result',33,553)
found rule to use: <rept-funcBody2> ->  <statement> <rept-funcBody2> 
popping <rept-funcBody2>adding ['<rept-funcBody2>', '<statement>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statement>']. Token to read: LexToken(id,'result',33,553)
found rule to use: <statement> ->  <idnestid> <statementLF> 
popping <statement>adding ['<statementLF>', '<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestid>']. Token to read: LexToken(id,'result',33,553)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>', 'id']. Token to read: LexToken(id,'result',33,553)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>']. Token to read: LexToken(ASSIGN,'=',33,560)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>']. Token to read: LexToken(ASSIGN,'=',33,560)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', 'EPSILON']. Token to read: LexToken(ASSIGN,'=',33,560)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>']. Token to read: LexToken(ASSIGN,'=',33,560)
found rule to use: <statementLF> ->  <assignOp> <expr> SEMICOLON 
popping <statementLF>adding ['SEMICOLON', '<expr>', '<assignOp>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', '<assignOp>']. Token to read: LexToken(ASSIGN,'=',33,560)
found rule to use: <assignOp> ->  ASSIGN 
popping <assignOp>adding ['ASSIGN'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', 'ASSIGN']. Token to read: LexToken(ASSIGN,'=',33,560)
popping terminal ASSIGN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>']. Token to read: LexToken(id,'a',33,562)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<arithExpr>']. Token to read: LexToken(id,'a',33,562)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'a',33,562)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'a',33,562)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'a',33,562)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'a',33,562)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(TIMES,'*',33,564)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(TIMES,'*',33,564)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(TIMES,'*',33,564)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(TIMES,'*',33,564)
found rule to use: <rightrec-term> ->  <multOp> <factor> <rightrec-term> 
popping <rightrec-term>adding ['<rightrec-term>', '<factor>', '<multOp>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>', '<multOp>']. Token to read: LexToken(TIMES,'*',33,564)
found rule to use: <multOp> ->  TIMES 
popping <multOp>adding ['TIMES'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>', 'TIMES']. Token to read: LexToken(TIMES,'*',33,564)
popping terminal TIMES
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'x',33,566)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'x',33,566)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'x',33,566)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(PLUS,'+',33,568)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(PLUS,'+',33,568)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(PLUS,'+',33,568)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(PLUS,'+',33,568)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(PLUS,'+',33,568)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(PLUS,'+',33,568)
found rule to use: <rightrec-arithExpr> ->  <addOp> <term> <rightrec-arithExpr> 
popping <rightrec-arithExpr>adding ['<rightrec-arithExpr>', '<term>', '<addOp>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<term>', '<addOp>']. Token to read: LexToken(PLUS,'+',33,568)
found rule to use: <addOp> ->  PLUS 
popping <addOp>adding ['PLUS'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<term>', 'PLUS']. Token to read: LexToken(PLUS,'+',33,568)
popping terminal PLUS
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'b',33,570)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'b',33,570)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'b',33,570)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'b',33,570)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(SEMICOLON,';',33,571)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(SEMICOLON,';',33,571)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',33,571)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(SEMICOLON,';',33,571)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',33,571)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(SEMICOLON,';',33,571)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',33,571)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>']. Token to read: LexToken(SEMICOLON,';',33,571)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',33,571)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',33,571)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>']. Token to read: LexToken(return,'return',34,577)
found rule to use: <rept-funcBody2> ->  <statement> <rept-funcBody2> 
popping <rept-funcBody2>adding ['<rept-funcBody2>', '<statement>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statement>']. Token to read: LexToken(return,'return',34,577)
found rule to use: <statement> ->  return LPAREN <expr> RPAREN SEMICOLON 
popping <statement>adding ['SEMICOLON', 'RPAREN', '<expr>', 'LPAREN', 'return'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<expr>', 'LPAREN', 'return']. Token to read: LexToken(return,'return',34,577)
popping terminal return
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<expr>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',34,584)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<expr>']. Token to read: LexToken(id,'result',34,585)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<arithExpr>']. Token to read: LexToken(id,'result',34,585)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'result',34,585)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'result',34,585)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'result',34,585)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'result',34,585)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(RPAREN,')',34,591)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(RPAREN,')',34,591)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(RPAREN,')',34,591)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(RPAREN,')',34,591)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(RPAREN,')',34,591)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(RPAREN,')',34,591)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', 'EPSILON']. Token to read: LexToken(RPAREN,')',34,591)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>']. Token to read: LexToken(RPAREN,')',34,591)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',34,591)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN']. Token to read: LexToken(RPAREN,')',34,591)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',34,592)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>']. Token to read: LexToken(end,'end',35,596)
found rule to use: <rept-funcBody2> ->  EPSILON 
popping <rept-funcBody2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', 'EPSILON']. Token to read: LexToken(end,'end',35,596)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end']. Token to read: LexToken(end,'end',35,596)
popping terminal end
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>']. Token to read: LexToken(id,'QUADRATIC',37,603)
found rule to use: <rept-prog1> ->  <funcDef> <rept-prog1> 
popping <rept-prog1>adding ['<rept-prog1>', '<funcDef>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcDef>']. Token to read: LexToken(id,'QUADRATIC',37,603)
found rule to use: <funcDef> ->  <funcHead> <funcBody> 
popping <funcDef>adding ['<funcBody>', '<funcHead>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHead>']. Token to read: LexToken(id,'QUADRATIC',37,603)
found rule to use: <funcHead> ->  <funcHead0> LPAREN <fParams> RPAREN COLON <funcHeadLF> 
popping <funcHead>adding ['<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', '<funcHead0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', '<funcHead0>']. Token to read: LexToken(id,'QUADRATIC',37,603)
found rule to use: <funcHead0> ->  id <funcHead0LF> 
popping <funcHead0>adding ['<funcHead0LF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', '<funcHead0LF>', 'id']. Token to read: LexToken(id,'QUADRATIC',37,603)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', '<funcHead0LF>']. Token to read: LexToken(DOUBLECOLON,'::',37,612)
found rule to use: <funcHead0LF> ->  DOUBLECOLON id 
popping <funcHead0LF>adding ['id', 'DOUBLECOLON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', 'id', 'DOUBLECOLON']. Token to read: LexToken(DOUBLECOLON,'::',37,612)
popping terminal DOUBLECOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', 'id']. Token to read: LexToken(id,'evaluate',37,614)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',37,622)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>']. Token to read: LexToken(float,'float',37,623)
found rule to use: <fParams> ->  <type> id <rept-fParams2> <rept-fParams3> 
popping <fParams>adding ['<rept-fParams3>', '<rept-fParams2>', 'id', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id', '<type>']. Token to read: LexToken(float,'float',37,623)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id', 'float']. Token to read: LexToken(float,'float',37,623)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id']. Token to read: LexToken(id,'x',37,629)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>']. Token to read: LexToken(RPAREN,')',37,630)
found rule to use: <rept-fParams2> ->  EPSILON 
popping <rept-fParams2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', 'EPSILON']. Token to read: LexToken(RPAREN,')',37,630)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>']. Token to read: LexToken(RPAREN,')',37,630)
found rule to use: <rept-fParams3> ->  EPSILON 
popping <rept-fParams3>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',37,630)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN']. Token to read: LexToken(RPAREN,')',37,630)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON']. Token to read: LexToken(COLON,':',37,632)
popping terminal COLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>']. Token to read: LexToken(float,'float',37,634)
found rule to use: <funcHeadLF> ->  <type> 
popping <funcHeadLF>adding ['<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<type>']. Token to read: LexToken(float,'float',37,634)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', 'float']. Token to read: LexToken(float,'float',37,634)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>']. Token to read: LexToken(local,'local',38,642)
found rule to use: <funcBody> ->  <opt-funcBody0> do <rept-funcBody2> end 
popping <funcBody>adding ['end', '<rept-funcBody2>', 'do', '<opt-funcBody0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<opt-funcBody0>']. Token to read: LexToken(local,'local',38,642)
found rule to use: <opt-funcBody0> ->  local <rept-opt-funcBody01> 
popping <opt-funcBody0>adding ['<rept-opt-funcBody01>', 'local'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'local']. Token to read: LexToken(local,'local',38,642)
popping terminal local
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>']. Token to read: LexToken(float,'float',39,652)
found rule to use: <rept-opt-funcBody01> ->  <varDecl> <rept-opt-funcBody01> 
popping <rept-opt-funcBody01>adding ['<rept-opt-funcBody01>', '<varDecl>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', '<varDecl>']. Token to read: LexToken(float,'float',39,652)
found rule to use: <varDecl> ->  <type> id <rept-varDecl2> SEMICOLON 
popping <varDecl>adding ['SEMICOLON', '<rept-varDecl2>', 'id', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>', 'id', '<type>']. Token to read: LexToken(float,'float',39,652)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>', 'id', 'float']. Token to read: LexToken(float,'float',39,652)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>', 'id']. Token to read: LexToken(id,'result',39,658)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>']. Token to read: LexToken(SEMICOLON,';',39,664)
found rule to use: <rept-varDecl2> ->  EPSILON 
popping <rept-varDecl2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',39,664)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',39,664)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>']. Token to read: LexToken(do,'do',40,668)
found rule to use: <rept-opt-funcBody01> ->  EPSILON 
popping <rept-opt-funcBody01>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', 'EPSILON']. Token to read: LexToken(do,'do',40,668)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do']. Token to read: LexToken(do,'do',40,668)
popping terminal do
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>']. Token to read: LexToken(id,'result',40,702)
found rule to use: <rept-funcBody2> ->  <statement> <rept-funcBody2> 
popping <rept-funcBody2>adding ['<rept-funcBody2>', '<statement>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statement>']. Token to read: LexToken(id,'result',40,702)
found rule to use: <statement> ->  <idnestid> <statementLF> 
popping <statement>adding ['<statementLF>', '<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestid>']. Token to read: LexToken(id,'result',40,702)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>', 'id']. Token to read: LexToken(id,'result',40,702)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>']. Token to read: LexToken(ASSIGN,'=',40,709)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>']. Token to read: LexToken(ASSIGN,'=',40,709)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', 'EPSILON']. Token to read: LexToken(ASSIGN,'=',40,709)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>']. Token to read: LexToken(ASSIGN,'=',40,709)
found rule to use: <statementLF> ->  <assignOp> <expr> SEMICOLON 
popping <statementLF>adding ['SEMICOLON', '<expr>', '<assignOp>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', '<assignOp>']. Token to read: LexToken(ASSIGN,'=',40,709)
found rule to use: <assignOp> ->  ASSIGN 
popping <assignOp>adding ['ASSIGN'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', 'ASSIGN']. Token to read: LexToken(ASSIGN,'=',40,709)
popping terminal ASSIGN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>']. Token to read: LexToken(id,'a',40,711)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<arithExpr>']. Token to read: LexToken(id,'a',40,711)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'a',40,711)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'a',40,711)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'a',40,711)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'a',40,711)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(SEMICOLON,';',40,712)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(SEMICOLON,';',40,712)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',40,712)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(SEMICOLON,';',40,712)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',40,712)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(SEMICOLON,';',40,712)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',40,712)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>']. Token to read: LexToken(SEMICOLON,';',40,712)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',40,712)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',40,712)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>']. Token to read: LexToken(id,'result',41,718)
found rule to use: <rept-funcBody2> ->  <statement> <rept-funcBody2> 
popping <rept-funcBody2>adding ['<rept-funcBody2>', '<statement>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statement>']. Token to read: LexToken(id,'result',41,718)
found rule to use: <statement> ->  <idnestid> <statementLF> 
popping <statement>adding ['<statementLF>', '<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestid>']. Token to read: LexToken(id,'result',41,718)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>', 'id']. Token to read: LexToken(id,'result',41,718)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>']. Token to read: LexToken(ASSIGN,'=',41,725)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>']. Token to read: LexToken(ASSIGN,'=',41,725)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', 'EPSILON']. Token to read: LexToken(ASSIGN,'=',41,725)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>']. Token to read: LexToken(ASSIGN,'=',41,725)
found rule to use: <statementLF> ->  <assignOp> <expr> SEMICOLON 
popping <statementLF>adding ['SEMICOLON', '<expr>', '<assignOp>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', '<assignOp>']. Token to read: LexToken(ASSIGN,'=',41,725)
found rule to use: <assignOp> ->  ASSIGN 
popping <assignOp>adding ['ASSIGN'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', 'ASSIGN']. Token to read: LexToken(ASSIGN,'=',41,725)
popping terminal ASSIGN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>']. Token to read: LexToken(id,'result',41,727)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<arithExpr>']. Token to read: LexToken(id,'result',41,727)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'result',41,727)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'result',41,727)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'result',41,727)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'result',41,727)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(TIMES,'*',41,734)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(TIMES,'*',41,734)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(TIMES,'*',41,734)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(TIMES,'*',41,734)
found rule to use: <rightrec-term> ->  <multOp> <factor> <rightrec-term> 
popping <rightrec-term>adding ['<rightrec-term>', '<factor>', '<multOp>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>', '<multOp>']. Token to read: LexToken(TIMES,'*',41,734)
found rule to use: <multOp> ->  TIMES 
popping <multOp>adding ['TIMES'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>', 'TIMES']. Token to read: LexToken(TIMES,'*',41,734)
popping terminal TIMES
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'x',41,736)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'x',41,736)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'x',41,736)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(PLUS,'+',41,738)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(PLUS,'+',41,738)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(PLUS,'+',41,738)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(PLUS,'+',41,738)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(PLUS,'+',41,738)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(PLUS,'+',41,738)
found rule to use: <rightrec-arithExpr> ->  <addOp> <term> <rightrec-arithExpr> 
popping <rightrec-arithExpr>adding ['<rightrec-arithExpr>', '<term>', '<addOp>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<term>', '<addOp>']. Token to read: LexToken(PLUS,'+',41,738)
found rule to use: <addOp> ->  PLUS 
popping <addOp>adding ['PLUS'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<term>', 'PLUS']. Token to read: LexToken(PLUS,'+',41,738)
popping terminal PLUS
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'b',41,740)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'b',41,740)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'b',41,740)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'b',41,740)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(SEMICOLON,';',41,741)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(SEMICOLON,';',41,741)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',41,741)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(SEMICOLON,';',41,741)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',41,741)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(SEMICOLON,';',41,741)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',41,741)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>']. Token to read: LexToken(SEMICOLON,';',41,741)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',41,741)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',41,741)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>']. Token to read: LexToken(id,'result',42,747)
found rule to use: <rept-funcBody2> ->  <statement> <rept-funcBody2> 
popping <rept-funcBody2>adding ['<rept-funcBody2>', '<statement>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statement>']. Token to read: LexToken(id,'result',42,747)
found rule to use: <statement> ->  <idnestid> <statementLF> 
popping <statement>adding ['<statementLF>', '<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestid>']. Token to read: LexToken(id,'result',42,747)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>', 'id']. Token to read: LexToken(id,'result',42,747)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>']. Token to read: LexToken(ASSIGN,'=',42,754)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>']. Token to read: LexToken(ASSIGN,'=',42,754)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', 'EPSILON']. Token to read: LexToken(ASSIGN,'=',42,754)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>']. Token to read: LexToken(ASSIGN,'=',42,754)
found rule to use: <statementLF> ->  <assignOp> <expr> SEMICOLON 
popping <statementLF>adding ['SEMICOLON', '<expr>', '<assignOp>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', '<assignOp>']. Token to read: LexToken(ASSIGN,'=',42,754)
found rule to use: <assignOp> ->  ASSIGN 
popping <assignOp>adding ['ASSIGN'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', 'ASSIGN']. Token to read: LexToken(ASSIGN,'=',42,754)
popping terminal ASSIGN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>']. Token to read: LexToken(id,'result',42,756)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<arithExpr>']. Token to read: LexToken(id,'result',42,756)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'result',42,756)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'result',42,756)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'result',42,756)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'result',42,756)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(TIMES,'*',42,763)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(TIMES,'*',42,763)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(TIMES,'*',42,763)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(TIMES,'*',42,763)
found rule to use: <rightrec-term> ->  <multOp> <factor> <rightrec-term> 
popping <rightrec-term>adding ['<rightrec-term>', '<factor>', '<multOp>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>', '<multOp>']. Token to read: LexToken(TIMES,'*',42,763)
found rule to use: <multOp> ->  TIMES 
popping <multOp>adding ['TIMES'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>', 'TIMES']. Token to read: LexToken(TIMES,'*',42,763)
popping terminal TIMES
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'x',42,765)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'x',42,765)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'x',42,765)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(PLUS,'+',42,767)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(PLUS,'+',42,767)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(PLUS,'+',42,767)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(PLUS,'+',42,767)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(PLUS,'+',42,767)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(PLUS,'+',42,767)
found rule to use: <rightrec-arithExpr> ->  <addOp> <term> <rightrec-arithExpr> 
popping <rightrec-arithExpr>adding ['<rightrec-arithExpr>', '<term>', '<addOp>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<term>', '<addOp>']. Token to read: LexToken(PLUS,'+',42,767)
found rule to use: <addOp> ->  PLUS 
popping <addOp>adding ['PLUS'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<term>', 'PLUS']. Token to read: LexToken(PLUS,'+',42,767)
popping terminal PLUS
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'c',42,769)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'c',42,769)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'c',42,769)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'c',42,769)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(SEMICOLON,';',42,770)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(SEMICOLON,';',42,770)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',42,770)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(SEMICOLON,';',42,770)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',42,770)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(SEMICOLON,';',42,770)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',42,770)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>']. Token to read: LexToken(SEMICOLON,';',42,770)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',42,770)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',42,770)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>']. Token to read: LexToken(return,'return',43,776)
found rule to use: <rept-funcBody2> ->  <statement> <rept-funcBody2> 
popping <rept-funcBody2>adding ['<rept-funcBody2>', '<statement>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statement>']. Token to read: LexToken(return,'return',43,776)
found rule to use: <statement> ->  return LPAREN <expr> RPAREN SEMICOLON 
popping <statement>adding ['SEMICOLON', 'RPAREN', '<expr>', 'LPAREN', 'return'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<expr>', 'LPAREN', 'return']. Token to read: LexToken(return,'return',43,776)
popping terminal return
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<expr>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',43,783)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<expr>']. Token to read: LexToken(id,'result',43,784)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<arithExpr>']. Token to read: LexToken(id,'result',43,784)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'result',43,784)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'result',43,784)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'result',43,784)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'result',43,784)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(RPAREN,')',43,790)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(RPAREN,')',43,790)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(RPAREN,')',43,790)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(RPAREN,')',43,790)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(RPAREN,')',43,790)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(RPAREN,')',43,790)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', 'EPSILON']. Token to read: LexToken(RPAREN,')',43,790)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>']. Token to read: LexToken(RPAREN,')',43,790)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',43,790)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN']. Token to read: LexToken(RPAREN,')',43,790)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',43,791)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>']. Token to read: LexToken(end,'end',44,795)
found rule to use: <rept-funcBody2> ->  EPSILON 
popping <rept-funcBody2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', 'EPSILON']. Token to read: LexToken(end,'end',44,795)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end']. Token to read: LexToken(end,'end',44,795)
popping terminal end
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>']. Token to read: LexToken(id,'LINEAR',46,802)
found rule to use: <rept-prog1> ->  <funcDef> <rept-prog1> 
popping <rept-prog1>adding ['<rept-prog1>', '<funcDef>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcDef>']. Token to read: LexToken(id,'LINEAR',46,802)
found rule to use: <funcDef> ->  <funcHead> <funcBody> 
popping <funcDef>adding ['<funcBody>', '<funcHead>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHead>']. Token to read: LexToken(id,'LINEAR',46,802)
found rule to use: <funcHead> ->  <funcHead0> LPAREN <fParams> RPAREN COLON <funcHeadLF> 
popping <funcHead>adding ['<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', '<funcHead0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', '<funcHead0>']. Token to read: LexToken(id,'LINEAR',46,802)
found rule to use: <funcHead0> ->  id <funcHead0LF> 
popping <funcHead0>adding ['<funcHead0LF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', '<funcHead0LF>', 'id']. Token to read: LexToken(id,'LINEAR',46,802)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', '<funcHead0LF>']. Token to read: LexToken(DOUBLECOLON,'::',46,808)
found rule to use: <funcHead0LF> ->  DOUBLECOLON id 
popping <funcHead0LF>adding ['id', 'DOUBLECOLON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', 'id', 'DOUBLECOLON']. Token to read: LexToken(DOUBLECOLON,'::',46,808)
popping terminal DOUBLECOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', 'id']. Token to read: LexToken(id,'build',46,810)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',46,815)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>']. Token to read: LexToken(float,'float',46,816)
found rule to use: <fParams> ->  <type> id <rept-fParams2> <rept-fParams3> 
popping <fParams>adding ['<rept-fParams3>', '<rept-fParams2>', 'id', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id', '<type>']. Token to read: LexToken(float,'float',46,816)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id', 'float']. Token to read: LexToken(float,'float',46,816)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id']. Token to read: LexToken(id,'A',46,822)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>']. Token to read: LexToken(COMMA,',',46,823)
found rule to use: <rept-fParams2> ->  EPSILON 
popping <rept-fParams2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', 'EPSILON']. Token to read: LexToken(COMMA,',',46,823)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>']. Token to read: LexToken(COMMA,',',46,823)
found rule to use: <rept-fParams3> ->  <fParamsTail> <rept-fParams3> 
popping <rept-fParams3>adding ['<rept-fParams3>', '<fParamsTail>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<fParamsTail>']. Token to read: LexToken(COMMA,',',46,823)
found rule to use: <fParamsTail> ->  COMMA <type> id <rept-fParamsTail3> 
popping <fParamsTail>adding ['<rept-fParamsTail3>', 'id', '<type>', 'COMMA'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id', '<type>', 'COMMA']. Token to read: LexToken(COMMA,',',46,823)
popping terminal COMMA
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id', '<type>']. Token to read: LexToken(float,'float',46,825)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id', 'float']. Token to read: LexToken(float,'float',46,825)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id']. Token to read: LexToken(id,'B',46,831)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>']. Token to read: LexToken(RPAREN,')',46,832)
found rule to use: <rept-fParamsTail3> ->  EPSILON 
popping <rept-fParamsTail3>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', 'EPSILON']. Token to read: LexToken(RPAREN,')',46,832)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>']. Token to read: LexToken(RPAREN,')',46,832)
found rule to use: <rept-fParams3> ->  EPSILON 
popping <rept-fParams3>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',46,832)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN']. Token to read: LexToken(RPAREN,')',46,832)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON']. Token to read: LexToken(COLON,':',46,834)
popping terminal COLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>']. Token to read: LexToken(id,'LINEAR',46,836)
found rule to use: <funcHeadLF> ->  <type> 
popping <funcHeadLF>adding ['<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<type>']. Token to read: LexToken(id,'LINEAR',46,836)
found rule to use: <type> ->  id 
popping <type>adding ['id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', 'id']. Token to read: LexToken(id,'LINEAR',46,836)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>']. Token to read: LexToken(local,'local',47,845)
found rule to use: <funcBody> ->  <opt-funcBody0> do <rept-funcBody2> end 
popping <funcBody>adding ['end', '<rept-funcBody2>', 'do', '<opt-funcBody0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<opt-funcBody0>']. Token to read: LexToken(local,'local',47,845)
found rule to use: <opt-funcBody0> ->  local <rept-opt-funcBody01> 
popping <opt-funcBody0>adding ['<rept-opt-funcBody01>', 'local'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'local']. Token to read: LexToken(local,'local',47,845)
popping terminal local
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>']. Token to read: LexToken(id,'LINEAR',48,855)
found rule to use: <rept-opt-funcBody01> ->  <varDecl> <rept-opt-funcBody01> 
popping <rept-opt-funcBody01>adding ['<rept-opt-funcBody01>', '<varDecl>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', '<varDecl>']. Token to read: LexToken(id,'LINEAR',48,855)
found rule to use: <varDecl> ->  <type> id <rept-varDecl2> SEMICOLON 
popping <varDecl>adding ['SEMICOLON', '<rept-varDecl2>', 'id', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>', 'id', '<type>']. Token to read: LexToken(id,'LINEAR',48,855)
found rule to use: <type> ->  id 
popping <type>adding ['id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>', 'id', 'id']. Token to read: LexToken(id,'LINEAR',48,855)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>', 'id']. Token to read: LexToken(id,'new_function',48,862)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>']. Token to read: LexToken(SEMICOLON,';',48,874)
found rule to use: <rept-varDecl2> ->  EPSILON 
popping <rept-varDecl2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',48,874)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',48,874)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>']. Token to read: LexToken(do,'do',49,878)
found rule to use: <rept-opt-funcBody01> ->  EPSILON 
popping <rept-opt-funcBody01>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', 'EPSILON']. Token to read: LexToken(do,'do',49,878)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do']. Token to read: LexToken(do,'do',49,878)
popping terminal do
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>']. Token to read: LexToken(id,'new_function',50,885)
found rule to use: <rept-funcBody2> ->  <statement> <rept-funcBody2> 
popping <rept-funcBody2>adding ['<rept-funcBody2>', '<statement>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statement>']. Token to read: LexToken(id,'new_function',50,885)
found rule to use: <statement> ->  <idnestid> <statementLF> 
popping <statement>adding ['<statementLF>', '<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestid>']. Token to read: LexToken(id,'new_function',50,885)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>', 'id']. Token to read: LexToken(id,'new_function',50,885)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>']. Token to read: LexToken(DOT,'.',50,897)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>']. Token to read: LexToken(DOT,'.',50,897)
found rule to use: <rept-idnestLF0> ->  DOT id <idnestLFLF> <rept-idnestLF0> 
popping <rept-idnestLF0>adding ['<rept-idnestLF0>', '<idnestLFLF>', 'id', 'DOT'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', '<idnestLFLF>', 'id', 'DOT']. Token to read: LexToken(DOT,'.',50,897)
popping terminal DOT
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', '<idnestLFLF>', 'id']. Token to read: LexToken(id,'a',50,898)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', '<idnestLFLF>']. Token to read: LexToken(ASSIGN,'=',50,900)
found rule to use: <idnestLFLF> ->  <rept-idnestLFLF0> 
popping <idnestLFLF>adding ['<rept-idnestLFLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', '<rept-idnestLFLF0>']. Token to read: LexToken(ASSIGN,'=',50,900)
found rule to use: <rept-idnestLFLF0> ->  EPSILON 
popping <rept-idnestLFLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', 'EPSILON']. Token to read: LexToken(ASSIGN,'=',50,900)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>']. Token to read: LexToken(ASSIGN,'=',50,900)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', 'EPSILON']. Token to read: LexToken(ASSIGN,'=',50,900)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>']. Token to read: LexToken(ASSIGN,'=',50,900)
found rule to use: <statementLF> ->  <assignOp> <expr> SEMICOLON 
popping <statementLF>adding ['SEMICOLON', '<expr>', '<assignOp>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', '<assignOp>']. Token to read: LexToken(ASSIGN,'=',50,900)
found rule to use: <assignOp> ->  ASSIGN 
popping <assignOp>adding ['ASSIGN'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', 'ASSIGN']. Token to read: LexToken(ASSIGN,'=',50,900)
popping terminal ASSIGN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>']. Token to read: LexToken(id,'A',50,902)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<arithExpr>']. Token to read: LexToken(id,'A',50,902)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'A',50,902)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'A',50,902)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'A',50,902)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'A',50,902)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(LPAREN,'(',50,903)
found rule to use: <idnestLF> ->  LPAREN <aParams> RPAREN 
popping <idnestLF>adding ['RPAREN', '<aParams>', 'LPAREN'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'RPAREN', '<aParams>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',50,903)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'RPAREN', '<aParams>']. Token to read: LexToken(RPAREN,')',50,904)
found rule to use: <aParams> ->  EPSILON 
popping <aParams>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',50,904)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'RPAREN']. Token to read: LexToken(RPAREN,')',50,904)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(SEMICOLON,';',50,905)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',50,905)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(SEMICOLON,';',50,905)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',50,905)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>']. Token to read: LexToken(SEMICOLON,';',50,905)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',50,905)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',50,905)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>']. Token to read: LexToken(id,'new_function',51,911)
found rule to use: <rept-funcBody2> ->  <statement> <rept-funcBody2> 
popping <rept-funcBody2>adding ['<rept-funcBody2>', '<statement>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statement>']. Token to read: LexToken(id,'new_function',51,911)
found rule to use: <statement> ->  <idnestid> <statementLF> 
popping <statement>adding ['<statementLF>', '<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestid>']. Token to read: LexToken(id,'new_function',51,911)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>', 'id']. Token to read: LexToken(id,'new_function',51,911)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>']. Token to read: LexToken(DOT,'.',51,923)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>']. Token to read: LexToken(DOT,'.',51,923)
found rule to use: <rept-idnestLF0> ->  DOT id <idnestLFLF> <rept-idnestLF0> 
popping <rept-idnestLF0>adding ['<rept-idnestLF0>', '<idnestLFLF>', 'id', 'DOT'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', '<idnestLFLF>', 'id', 'DOT']. Token to read: LexToken(DOT,'.',51,923)
popping terminal DOT
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', '<idnestLFLF>', 'id']. Token to read: LexToken(id,'b',51,924)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', '<idnestLFLF>']. Token to read: LexToken(ASSIGN,'=',51,926)
found rule to use: <idnestLFLF> ->  <rept-idnestLFLF0> 
popping <idnestLFLF>adding ['<rept-idnestLFLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', '<rept-idnestLFLF0>']. Token to read: LexToken(ASSIGN,'=',51,926)
found rule to use: <rept-idnestLFLF0> ->  EPSILON 
popping <rept-idnestLFLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', 'EPSILON']. Token to read: LexToken(ASSIGN,'=',51,926)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>']. Token to read: LexToken(ASSIGN,'=',51,926)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', 'EPSILON']. Token to read: LexToken(ASSIGN,'=',51,926)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>']. Token to read: LexToken(ASSIGN,'=',51,926)
found rule to use: <statementLF> ->  <assignOp> <expr> SEMICOLON 
popping <statementLF>adding ['SEMICOLON', '<expr>', '<assignOp>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', '<assignOp>']. Token to read: LexToken(ASSIGN,'=',51,926)
found rule to use: <assignOp> ->  ASSIGN 
popping <assignOp>adding ['ASSIGN'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', 'ASSIGN']. Token to read: LexToken(ASSIGN,'=',51,926)
popping terminal ASSIGN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>']. Token to read: LexToken(id,'B',51,928)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<arithExpr>']. Token to read: LexToken(id,'B',51,928)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'B',51,928)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'B',51,928)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'B',51,928)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'B',51,928)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(SEMICOLON,';',51,929)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(SEMICOLON,';',51,929)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',51,929)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(SEMICOLON,';',51,929)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',51,929)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(SEMICOLON,';',51,929)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',51,929)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>']. Token to read: LexToken(SEMICOLON,';',51,929)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',51,929)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',51,929)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>']. Token to read: LexToken(return,'return',52,935)
found rule to use: <rept-funcBody2> ->  <statement> <rept-funcBody2> 
popping <rept-funcBody2>adding ['<rept-funcBody2>', '<statement>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statement>']. Token to read: LexToken(return,'return',52,935)
found rule to use: <statement> ->  return LPAREN <expr> RPAREN SEMICOLON 
popping <statement>adding ['SEMICOLON', 'RPAREN', '<expr>', 'LPAREN', 'return'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<expr>', 'LPAREN', 'return']. Token to read: LexToken(return,'return',52,935)
popping terminal return
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<expr>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',52,942)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<expr>']. Token to read: LexToken(id,'new_function',52,943)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<arithExpr>']. Token to read: LexToken(id,'new_function',52,943)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'new_function',52,943)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'new_function',52,943)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'new_function',52,943)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'new_function',52,943)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(RPAREN,')',52,955)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(RPAREN,')',52,955)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(RPAREN,')',52,955)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(RPAREN,')',52,955)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(RPAREN,')',52,955)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(RPAREN,')',52,955)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', 'EPSILON']. Token to read: LexToken(RPAREN,')',52,955)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>']. Token to read: LexToken(RPAREN,')',52,955)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',52,955)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN']. Token to read: LexToken(RPAREN,')',52,955)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',52,956)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>']. Token to read: LexToken(end,'end',53,960)
found rule to use: <rept-funcBody2> ->  EPSILON 
popping <rept-funcBody2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', 'EPSILON']. Token to read: LexToken(end,'end',53,960)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end']. Token to read: LexToken(end,'end',53,960)
popping terminal end
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>']. Token to read: LexToken(id,'QUADRATIC',55,969)
found rule to use: <rept-prog1> ->  <funcDef> <rept-prog1> 
popping <rept-prog1>adding ['<rept-prog1>', '<funcDef>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcDef>']. Token to read: LexToken(id,'QUADRATIC',55,969)
found rule to use: <funcDef> ->  <funcHead> <funcBody> 
popping <funcDef>adding ['<funcBody>', '<funcHead>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHead>']. Token to read: LexToken(id,'QUADRATIC',55,969)
found rule to use: <funcHead> ->  <funcHead0> LPAREN <fParams> RPAREN COLON <funcHeadLF> 
popping <funcHead>adding ['<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', '<funcHead0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', '<funcHead0>']. Token to read: LexToken(id,'QUADRATIC',55,969)
found rule to use: <funcHead0> ->  id <funcHead0LF> 
popping <funcHead0>adding ['<funcHead0LF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', '<funcHead0LF>', 'id']. Token to read: LexToken(id,'QUADRATIC',55,969)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', '<funcHead0LF>']. Token to read: LexToken(DOUBLECOLON,'::',55,978)
found rule to use: <funcHead0LF> ->  DOUBLECOLON id 
popping <funcHead0LF>adding ['id', 'DOUBLECOLON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', 'id', 'DOUBLECOLON']. Token to read: LexToken(DOUBLECOLON,'::',55,978)
popping terminal DOUBLECOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN', 'id']. Token to read: LexToken(id,'build',55,980)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',55,985)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<fParams>']. Token to read: LexToken(float,'float',55,986)
found rule to use: <fParams> ->  <type> id <rept-fParams2> <rept-fParams3> 
popping <fParams>adding ['<rept-fParams3>', '<rept-fParams2>', 'id', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id', '<type>']. Token to read: LexToken(float,'float',55,986)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id', 'float']. Token to read: LexToken(float,'float',55,986)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>', 'id']. Token to read: LexToken(id,'A',55,992)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParams2>']. Token to read: LexToken(COMMA,',',55,993)
found rule to use: <rept-fParams2> ->  EPSILON 
popping <rept-fParams2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', 'EPSILON']. Token to read: LexToken(COMMA,',',55,993)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>']. Token to read: LexToken(COMMA,',',55,993)
found rule to use: <rept-fParams3> ->  <fParamsTail> <rept-fParams3> 
popping <rept-fParams3>adding ['<rept-fParams3>', '<fParamsTail>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<fParamsTail>']. Token to read: LexToken(COMMA,',',55,993)
found rule to use: <fParamsTail> ->  COMMA <type> id <rept-fParamsTail3> 
popping <fParamsTail>adding ['<rept-fParamsTail3>', 'id', '<type>', 'COMMA'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id', '<type>', 'COMMA']. Token to read: LexToken(COMMA,',',55,993)
popping terminal COMMA
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id', '<type>']. Token to read: LexToken(float,'float',55,995)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id', 'float']. Token to read: LexToken(float,'float',55,995)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id']. Token to read: LexToken(id,'B',55,1001)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>']. Token to read: LexToken(COMMA,',',55,1002)
found rule to use: <rept-fParamsTail3> ->  EPSILON 
popping <rept-fParamsTail3>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', 'EPSILON']. Token to read: LexToken(COMMA,',',55,1002)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>']. Token to read: LexToken(COMMA,',',55,1002)
found rule to use: <rept-fParams3> ->  <fParamsTail> <rept-fParams3> 
popping <rept-fParams3>adding ['<rept-fParams3>', '<fParamsTail>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<fParamsTail>']. Token to read: LexToken(COMMA,',',55,1002)
found rule to use: <fParamsTail> ->  COMMA <type> id <rept-fParamsTail3> 
popping <fParamsTail>adding ['<rept-fParamsTail3>', 'id', '<type>', 'COMMA'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id', '<type>', 'COMMA']. Token to read: LexToken(COMMA,',',55,1002)
popping terminal COMMA
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id', '<type>']. Token to read: LexToken(float,'float',55,1004)
found rule to use: <type> ->  float 
popping <type>adding ['float'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id', 'float']. Token to read: LexToken(float,'float',55,1004)
popping terminal float
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>', 'id']. Token to read: LexToken(id,'C',55,1010)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', '<rept-fParamsTail3>']. Token to read: LexToken(RPAREN,')',55,1011)
found rule to use: <rept-fParamsTail3> ->  EPSILON 
popping <rept-fParamsTail3>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>', 'EPSILON']. Token to read: LexToken(RPAREN,')',55,1011)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', '<rept-fParams3>']. Token to read: LexToken(RPAREN,')',55,1011)
found rule to use: <rept-fParams3> ->  EPSILON 
popping <rept-fParams3>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',55,1011)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON', 'RPAREN']. Token to read: LexToken(RPAREN,')',55,1011)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>', 'COLON']. Token to read: LexToken(COLON,':',55,1013)
popping terminal COLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<funcHeadLF>']. Token to read: LexToken(id,'QUADRATIC',55,1015)
found rule to use: <funcHeadLF> ->  <type> 
popping <funcHeadLF>adding ['<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', '<type>']. Token to read: LexToken(id,'QUADRATIC',55,1015)
found rule to use: <type> ->  id 
popping <type>adding ['id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>', 'id']. Token to read: LexToken(id,'QUADRATIC',55,1015)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', '<funcBody>']. Token to read: LexToken(local,'local',56,1027)
found rule to use: <funcBody> ->  <opt-funcBody0> do <rept-funcBody2> end 
popping <funcBody>adding ['end', '<rept-funcBody2>', 'do', '<opt-funcBody0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<opt-funcBody0>']. Token to read: LexToken(local,'local',56,1027)
found rule to use: <opt-funcBody0> ->  local <rept-opt-funcBody01> 
popping <opt-funcBody0>adding ['<rept-opt-funcBody01>', 'local'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'local']. Token to read: LexToken(local,'local',56,1027)
popping terminal local
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>']. Token to read: LexToken(id,'QUADRATIC',57,1037)
found rule to use: <rept-opt-funcBody01> ->  <varDecl> <rept-opt-funcBody01> 
popping <rept-opt-funcBody01>adding ['<rept-opt-funcBody01>', '<varDecl>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', '<varDecl>']. Token to read: LexToken(id,'QUADRATIC',57,1037)
found rule to use: <varDecl> ->  <type> id <rept-varDecl2> SEMICOLON 
popping <varDecl>adding ['SEMICOLON', '<rept-varDecl2>', 'id', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>', 'id', '<type>']. Token to read: LexToken(id,'QUADRATIC',57,1037)
found rule to use: <type> ->  id 
popping <type>adding ['id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>', 'id', 'id']. Token to read: LexToken(id,'QUADRATIC',57,1037)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>', 'id']. Token to read: LexToken(id,'new_function',57,1047)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>']. Token to read: LexToken(SEMICOLON,';',57,1059)
found rule to use: <rept-varDecl2> ->  EPSILON 
popping <rept-varDecl2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',57,1059)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',57,1059)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>']. Token to read: LexToken(do,'do',58,1063)
found rule to use: <rept-opt-funcBody01> ->  EPSILON 
popping <rept-opt-funcBody01>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do', 'EPSILON']. Token to read: LexToken(do,'do',58,1063)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'do']. Token to read: LexToken(do,'do',58,1063)
popping terminal do
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>']. Token to read: LexToken(id,'new_function',59,1070)
found rule to use: <rept-funcBody2> ->  <statement> <rept-funcBody2> 
popping <rept-funcBody2>adding ['<rept-funcBody2>', '<statement>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statement>']. Token to read: LexToken(id,'new_function',59,1070)
found rule to use: <statement> ->  <idnestid> <statementLF> 
popping <statement>adding ['<statementLF>', '<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestid>']. Token to read: LexToken(id,'new_function',59,1070)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>', 'id']. Token to read: LexToken(id,'new_function',59,1070)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>']. Token to read: LexToken(DOT,'.',59,1082)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>']. Token to read: LexToken(DOT,'.',59,1082)
found rule to use: <rept-idnestLF0> ->  DOT id <idnestLFLF> <rept-idnestLF0> 
popping <rept-idnestLF0>adding ['<rept-idnestLF0>', '<idnestLFLF>', 'id', 'DOT'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', '<idnestLFLF>', 'id', 'DOT']. Token to read: LexToken(DOT,'.',59,1082)
popping terminal DOT
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', '<idnestLFLF>', 'id']. Token to read: LexToken(id,'a',59,1083)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', '<idnestLFLF>']. Token to read: LexToken(ASSIGN,'=',59,1085)
found rule to use: <idnestLFLF> ->  <rept-idnestLFLF0> 
popping <idnestLFLF>adding ['<rept-idnestLFLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', '<rept-idnestLFLF0>']. Token to read: LexToken(ASSIGN,'=',59,1085)
found rule to use: <rept-idnestLFLF0> ->  EPSILON 
popping <rept-idnestLFLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', 'EPSILON']. Token to read: LexToken(ASSIGN,'=',59,1085)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>']. Token to read: LexToken(ASSIGN,'=',59,1085)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', 'EPSILON']. Token to read: LexToken(ASSIGN,'=',59,1085)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>']. Token to read: LexToken(ASSIGN,'=',59,1085)
found rule to use: <statementLF> ->  <assignOp> <expr> SEMICOLON 
popping <statementLF>adding ['SEMICOLON', '<expr>', '<assignOp>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', '<assignOp>']. Token to read: LexToken(ASSIGN,'=',59,1085)
found rule to use: <assignOp> ->  ASSIGN 
popping <assignOp>adding ['ASSIGN'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', 'ASSIGN']. Token to read: LexToken(ASSIGN,'=',59,1085)
popping terminal ASSIGN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>']. Token to read: LexToken(id,'A',59,1087)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<arithExpr>']. Token to read: LexToken(id,'A',59,1087)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'A',59,1087)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'A',59,1087)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'A',59,1087)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'A',59,1087)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(SEMICOLON,';',59,1088)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(SEMICOLON,';',59,1088)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',59,1088)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(SEMICOLON,';',59,1088)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',59,1088)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(SEMICOLON,';',59,1088)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',59,1088)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>']. Token to read: LexToken(SEMICOLON,';',59,1088)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',59,1088)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',59,1088)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>']. Token to read: LexToken(id,'new_function',60,1094)
found rule to use: <rept-funcBody2> ->  <statement> <rept-funcBody2> 
popping <rept-funcBody2>adding ['<rept-funcBody2>', '<statement>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statement>']. Token to read: LexToken(id,'new_function',60,1094)
found rule to use: <statement> ->  <idnestid> <statementLF> 
popping <statement>adding ['<statementLF>', '<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestid>']. Token to read: LexToken(id,'new_function',60,1094)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>', 'id']. Token to read: LexToken(id,'new_function',60,1094)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>']. Token to read: LexToken(DOT,'.',60,1106)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>']. Token to read: LexToken(DOT,'.',60,1106)
found rule to use: <rept-idnestLF0> ->  DOT id <idnestLFLF> <rept-idnestLF0> 
popping <rept-idnestLF0>adding ['<rept-idnestLF0>', '<idnestLFLF>', 'id', 'DOT'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', '<idnestLFLF>', 'id', 'DOT']. Token to read: LexToken(DOT,'.',60,1106)
popping terminal DOT
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', '<idnestLFLF>', 'id']. Token to read: LexToken(id,'b',60,1107)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', '<idnestLFLF>']. Token to read: LexToken(ASSIGN,'=',60,1109)
found rule to use: <idnestLFLF> ->  <rept-idnestLFLF0> 
popping <idnestLFLF>adding ['<rept-idnestLFLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', '<rept-idnestLFLF0>']. Token to read: LexToken(ASSIGN,'=',60,1109)
found rule to use: <rept-idnestLFLF0> ->  EPSILON 
popping <rept-idnestLFLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', 'EPSILON']. Token to read: LexToken(ASSIGN,'=',60,1109)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>']. Token to read: LexToken(ASSIGN,'=',60,1109)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', 'EPSILON']. Token to read: LexToken(ASSIGN,'=',60,1109)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>']. Token to read: LexToken(ASSIGN,'=',60,1109)
found rule to use: <statementLF> ->  <assignOp> <expr> SEMICOLON 
popping <statementLF>adding ['SEMICOLON', '<expr>', '<assignOp>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', '<assignOp>']. Token to read: LexToken(ASSIGN,'=',60,1109)
found rule to use: <assignOp> ->  ASSIGN 
popping <assignOp>adding ['ASSIGN'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', 'ASSIGN']. Token to read: LexToken(ASSIGN,'=',60,1109)
popping terminal ASSIGN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>']. Token to read: LexToken(id,'B',60,1111)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<arithExpr>']. Token to read: LexToken(id,'B',60,1111)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'B',60,1111)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'B',60,1111)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'B',60,1111)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'B',60,1111)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(SEMICOLON,';',60,1112)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(SEMICOLON,';',60,1112)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',60,1112)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(SEMICOLON,';',60,1112)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',60,1112)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(SEMICOLON,';',60,1112)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',60,1112)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>']. Token to read: LexToken(SEMICOLON,';',60,1112)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',60,1112)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',60,1112)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>']. Token to read: LexToken(id,'new_function',61,1118)
found rule to use: <rept-funcBody2> ->  <statement> <rept-funcBody2> 
popping <rept-funcBody2>adding ['<rept-funcBody2>', '<statement>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statement>']. Token to read: LexToken(id,'new_function',61,1118)
found rule to use: <statement> ->  <idnestid> <statementLF> 
popping <statement>adding ['<statementLF>', '<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestid>']. Token to read: LexToken(id,'new_function',61,1118)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>', 'id']. Token to read: LexToken(id,'new_function',61,1118)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>']. Token to read: LexToken(DOT,'.',61,1130)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>']. Token to read: LexToken(DOT,'.',61,1130)
found rule to use: <rept-idnestLF0> ->  DOT id <idnestLFLF> <rept-idnestLF0> 
popping <rept-idnestLF0>adding ['<rept-idnestLF0>', '<idnestLFLF>', 'id', 'DOT'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', '<idnestLFLF>', 'id', 'DOT']. Token to read: LexToken(DOT,'.',61,1130)
popping terminal DOT
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', '<idnestLFLF>', 'id']. Token to read: LexToken(id,'c',61,1131)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', '<idnestLFLF>']. Token to read: LexToken(ASSIGN,'=',61,1133)
found rule to use: <idnestLFLF> ->  <rept-idnestLFLF0> 
popping <idnestLFLF>adding ['<rept-idnestLFLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', '<rept-idnestLFLF0>']. Token to read: LexToken(ASSIGN,'=',61,1133)
found rule to use: <rept-idnestLFLF0> ->  EPSILON 
popping <rept-idnestLFLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>', 'EPSILON']. Token to read: LexToken(ASSIGN,'=',61,1133)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>']. Token to read: LexToken(ASSIGN,'=',61,1133)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>', 'EPSILON']. Token to read: LexToken(ASSIGN,'=',61,1133)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statementLF>']. Token to read: LexToken(ASSIGN,'=',61,1133)
found rule to use: <statementLF> ->  <assignOp> <expr> SEMICOLON 
popping <statementLF>adding ['SEMICOLON', '<expr>', '<assignOp>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', '<assignOp>']. Token to read: LexToken(ASSIGN,'=',61,1133)
found rule to use: <assignOp> ->  ASSIGN 
popping <assignOp>adding ['ASSIGN'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', 'ASSIGN']. Token to read: LexToken(ASSIGN,'=',61,1133)
popping terminal ASSIGN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>']. Token to read: LexToken(id,'C',61,1135)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<arithExpr>']. Token to read: LexToken(id,'C',61,1135)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'C',61,1135)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'C',61,1135)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'C',61,1135)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'C',61,1135)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(SEMICOLON,';',61,1136)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(SEMICOLON,';',61,1136)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',61,1136)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(SEMICOLON,';',61,1136)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',61,1136)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(SEMICOLON,';',61,1136)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',61,1136)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>']. Token to read: LexToken(SEMICOLON,';',61,1136)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',61,1136)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',61,1136)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>']. Token to read: LexToken(return,'return',62,1142)
found rule to use: <rept-funcBody2> ->  <statement> <rept-funcBody2> 
popping <rept-funcBody2>adding ['<rept-funcBody2>', '<statement>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', '<statement>']. Token to read: LexToken(return,'return',62,1142)
found rule to use: <statement> ->  return LPAREN <expr> RPAREN SEMICOLON 
popping <statement>adding ['SEMICOLON', 'RPAREN', '<expr>', 'LPAREN', 'return'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<expr>', 'LPAREN', 'return']. Token to read: LexToken(return,'return',62,1142)
popping terminal return
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<expr>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',62,1149)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<expr>']. Token to read: LexToken(id,'new_function',62,1150)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<arithExpr>']. Token to read: LexToken(id,'new_function',62,1150)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'new_function',62,1150)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'new_function',62,1150)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'new_function',62,1150)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'new_function',62,1150)
popping terminal id
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(RPAREN,')',62,1162)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(RPAREN,')',62,1162)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(RPAREN,')',62,1162)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(RPAREN,')',62,1162)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(RPAREN,')',62,1162)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(RPAREN,')',62,1162)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>', 'EPSILON']. Token to read: LexToken(RPAREN,')',62,1162)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', '<exprLF>']. Token to read: LexToken(RPAREN,')',62,1162)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',62,1162)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON', 'RPAREN']. Token to read: LexToken(RPAREN,')',62,1162)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',62,1163)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', '<rept-funcBody2>']. Token to read: LexToken(end,'end',63,1167)
found rule to use: <rept-funcBody2> ->  EPSILON 
popping <rept-funcBody2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end', 'EPSILON']. Token to read: LexToken(end,'end',63,1167)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>', 'end']. Token to read: LexToken(end,'end',63,1167)
popping terminal end
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', '<rept-prog1>']. Token to read: LexToken(main,'main',67,1176)
found rule to use: <rept-prog1> ->  EPSILON 
popping <rept-prog1>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main', 'EPSILON']. Token to read: LexToken(main,'main',67,1176)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', '<funcBody>', 'main']. Token to read: LexToken(main,'main',67,1176)
popping terminal main
---------------------------------------------------------------
currentStack['$', '<funcBody>']. Token to read: LexToken(local,'local',68,1183)
found rule to use: <funcBody> ->  <opt-funcBody0> do <rept-funcBody2> end 
popping <funcBody>adding ['end', '<rept-funcBody2>', 'do', '<opt-funcBody0>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<opt-funcBody0>']. Token to read: LexToken(local,'local',68,1183)
found rule to use: <opt-funcBody0> ->  local <rept-opt-funcBody01> 
popping <opt-funcBody0>adding ['<rept-opt-funcBody01>', 'local'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'local']. Token to read: LexToken(local,'local',68,1183)
popping terminal local
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>']. Token to read: LexToken(id,'linear',69,1193)
found rule to use: <rept-opt-funcBody01> ->  <varDecl> <rept-opt-funcBody01> 
popping <rept-opt-funcBody01>adding ['<rept-opt-funcBody01>', '<varDecl>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', '<varDecl>']. Token to read: LexToken(id,'linear',69,1193)
found rule to use: <varDecl> ->  <type> id <rept-varDecl2> SEMICOLON 
popping <varDecl>adding ['SEMICOLON', '<rept-varDecl2>', 'id', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>', 'id', '<type>']. Token to read: LexToken(id,'linear',69,1193)
found rule to use: <type> ->  id 
popping <type>adding ['id'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>', 'id', 'id']. Token to read: LexToken(id,'linear',69,1193)
popping terminal id
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>', 'id']. Token to read: LexToken(id,'f1',69,1200)
popping terminal id
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>']. Token to read: LexToken(SEMICOLON,';',69,1202)
found rule to use: <rept-varDecl2> ->  EPSILON 
popping <rept-varDecl2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',69,1202)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',69,1202)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>']. Token to read: LexToken(id,'quadratic',70,1208)
found rule to use: <rept-opt-funcBody01> ->  <varDecl> <rept-opt-funcBody01> 
popping <rept-opt-funcBody01>adding ['<rept-opt-funcBody01>', '<varDecl>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', '<varDecl>']. Token to read: LexToken(id,'quadratic',70,1208)
found rule to use: <varDecl> ->  <type> id <rept-varDecl2> SEMICOLON 
popping <varDecl>adding ['SEMICOLON', '<rept-varDecl2>', 'id', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>', 'id', '<type>']. Token to read: LexToken(id,'quadratic',70,1208)
found rule to use: <type> ->  id 
popping <type>adding ['id'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>', 'id', 'id']. Token to read: LexToken(id,'quadratic',70,1208)
popping terminal id
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>', 'id']. Token to read: LexToken(id,'f2',70,1218)
popping terminal id
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>']. Token to read: LexToken(SEMICOLON,';',70,1220)
found rule to use: <rept-varDecl2> ->  EPSILON 
popping <rept-varDecl2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',70,1220)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',70,1220)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>']. Token to read: LexToken(integer,'integer',71,1226)
found rule to use: <rept-opt-funcBody01> ->  <varDecl> <rept-opt-funcBody01> 
popping <rept-opt-funcBody01>adding ['<rept-opt-funcBody01>', '<varDecl>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', '<varDecl>']. Token to read: LexToken(integer,'integer',71,1226)
found rule to use: <varDecl> ->  <type> id <rept-varDecl2> SEMICOLON 
popping <varDecl>adding ['SEMICOLON', '<rept-varDecl2>', 'id', '<type>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>', 'id', '<type>']. Token to read: LexToken(integer,'integer',71,1226)
found rule to use: <type> ->  integer 
popping <type>adding ['integer'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>', 'id', 'integer']. Token to read: LexToken(integer,'integer',71,1226)
popping terminal integer
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>', 'id']. Token to read: LexToken(id,'counter',71,1234)
popping terminal id
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', '<rept-varDecl2>']. Token to read: LexToken(SEMICOLON,';',71,1241)
found rule to use: <rept-varDecl2> ->  EPSILON 
popping <rept-varDecl2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',71,1241)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',71,1241)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', '<rept-opt-funcBody01>']. Token to read: LexToken(do,'do',72,1245)
found rule to use: <rept-opt-funcBody01> ->  EPSILON 
popping <rept-opt-funcBody01>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do', 'EPSILON']. Token to read: LexToken(do,'do',72,1245)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'do']. Token to read: LexToken(do,'do',72,1245)
popping terminal do
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>']. Token to read: LexToken(id,'f1',73,1252)
found rule to use: <rept-funcBody2> ->  <statement> <rept-funcBody2> 
popping <rept-funcBody2>adding ['<rept-funcBody2>', '<statement>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', '<statement>']. Token to read: LexToken(id,'f1',73,1252)
found rule to use: <statement> ->  <idnestid> <statementLF> 
popping <statement>adding ['<statementLF>', '<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestid>']. Token to read: LexToken(id,'f1',73,1252)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>', 'id']. Token to read: LexToken(id,'f1',73,1252)
popping terminal id
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>']. Token to read: LexToken(ASSIGN,'=',73,1255)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>']. Token to read: LexToken(ASSIGN,'=',73,1255)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', '<statementLF>', 'EPSILON']. Token to read: LexToken(ASSIGN,'=',73,1255)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', '<statementLF>']. Token to read: LexToken(ASSIGN,'=',73,1255)
found rule to use: <statementLF> ->  <assignOp> <expr> SEMICOLON 
popping <statementLF>adding ['SEMICOLON', '<expr>', '<assignOp>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', '<assignOp>']. Token to read: LexToken(ASSIGN,'=',73,1255)
found rule to use: <assignOp> ->  ASSIGN 
popping <assignOp>adding ['ASSIGN'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', 'ASSIGN']. Token to read: LexToken(ASSIGN,'=',73,1255)
popping terminal ASSIGN
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>']. Token to read: LexToken(id,'f1',73,1257)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<arithExpr>']. Token to read: LexToken(id,'f1',73,1257)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'f1',73,1257)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'f1',73,1257)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'f1',73,1257)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'f1',73,1257)
popping terminal id
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(DOT,'.',73,1259)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(DOT,'.',73,1259)
found rule to use: <rept-idnestLF0> ->  DOT id <idnestLFLF> <rept-idnestLF0> 
popping <rept-idnestLF0>adding ['<rept-idnestLF0>', '<idnestLFLF>', 'id', 'DOT'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<idnestLFLF>', 'id', 'DOT']. Token to read: LexToken(DOT,'.',73,1259)
popping terminal DOT
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<idnestLFLF>', 'id']. Token to read: LexToken(id,'build2',73,1260)
popping terminal id
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<idnestLFLF>']. Token to read: LexToken(LSB,'[',73,1266)
found rule to use: <idnestLFLF> ->  <rept-idnestLFLF0> 
popping <idnestLFLF>adding ['<rept-idnestLFLF0>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>']. Token to read: LexToken(LSB,'[',73,1266)
found rule to use: <rept-idnestLFLF0> ->  <indice> <rept-idnestLFLF0> 
popping <rept-idnestLFLF0>adding ['<rept-idnestLFLF0>', '<indice>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', '<indice>']. Token to read: LexToken(LSB,'[',73,1266)
found rule to use: <indice> ->  LSB <arithExpr> RSB 
popping <indice>adding ['RSB', '<arithExpr>', 'LSB'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<arithExpr>', 'LSB']. Token to read: LexToken(LSB,'[',73,1266)
popping terminal LSB
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<arithExpr>']. Token to read: LexToken(intNum,'1',73,1267)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(intNum,'1',73,1267)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(intNum,'1',73,1267)
found rule to use: <factor> ->  intNum 
popping <factor>adding ['intNum'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<rightrec-arithExpr>', '<rightrec-term>', 'intNum']. Token to read: LexToken(intNum,'1',73,1267)
popping terminal intNum
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(PLUS,'+',73,1268)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(PLUS,'+',73,1268)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<rightrec-arithExpr>']. Token to read: LexToken(PLUS,'+',73,1268)
found rule to use: <rightrec-arithExpr> ->  <addOp> <term> <rightrec-arithExpr> 
popping <rightrec-arithExpr>adding ['<rightrec-arithExpr>', '<term>', '<addOp>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<rightrec-arithExpr>', '<term>', '<addOp>']. Token to read: LexToken(PLUS,'+',73,1268)
found rule to use: <addOp> ->  PLUS 
popping <addOp>adding ['PLUS'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<rightrec-arithExpr>', '<term>', 'PLUS']. Token to read: LexToken(PLUS,'+',73,1268)
popping terminal PLUS
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(intNum,'1',73,1269)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(intNum,'1',73,1269)
found rule to use: <factor> ->  intNum 
popping <factor>adding ['intNum'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<rightrec-arithExpr>', '<rightrec-term>', 'intNum']. Token to read: LexToken(intNum,'1',73,1269)
popping terminal intNum
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(RSB,']',73,1270)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(RSB,']',73,1270)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<rightrec-arithExpr>']. Token to read: LexToken(RSB,']',73,1270)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', 'EPSILON']. Token to read: LexToken(RSB,']',73,1270)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB']. Token to read: LexToken(RSB,']',73,1270)
popping terminal RSB
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>']. Token to read: LexToken(LSB,'[',73,1271)
found rule to use: <rept-idnestLFLF0> ->  <indice> <rept-idnestLFLF0> 
popping <rept-idnestLFLF0>adding ['<rept-idnestLFLF0>', '<indice>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', '<indice>']. Token to read: LexToken(LSB,'[',73,1271)
found rule to use: <indice> ->  LSB <arithExpr> RSB 
popping <indice>adding ['RSB', '<arithExpr>', 'LSB'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<arithExpr>', 'LSB']. Token to read: LexToken(LSB,'[',73,1271)
popping terminal LSB
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<arithExpr>']. Token to read: LexToken(intNum,'10',73,1272)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(intNum,'10',73,1272)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(intNum,'10',73,1272)
found rule to use: <factor> ->  intNum 
popping <factor>adding ['intNum'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<rightrec-arithExpr>', '<rightrec-term>', 'intNum']. Token to read: LexToken(intNum,'10',73,1272)
popping terminal intNum
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(RSB,']',73,1274)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(RSB,']',73,1274)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', '<rightrec-arithExpr>']. Token to read: LexToken(RSB,']',73,1274)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB', 'EPSILON']. Token to read: LexToken(RSB,']',73,1274)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>', 'RSB']. Token to read: LexToken(RSB,']',73,1274)
popping terminal RSB
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<rept-idnestLFLF0>']. Token to read: LexToken(SEMICOLON,';',73,1275)
found rule to use: <rept-idnestLFLF0> ->  EPSILON 
popping <rept-idnestLFLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',73,1275)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(SEMICOLON,';',73,1275)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',73,1275)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(SEMICOLON,';',73,1275)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',73,1275)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(SEMICOLON,';',73,1275)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',73,1275)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>']. Token to read: LexToken(SEMICOLON,';',73,1275)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',73,1275)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',73,1275)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>']. Token to read: LexToken(id,'f2',74,1281)
found rule to use: <rept-funcBody2> ->  <statement> <rept-funcBody2> 
popping <rept-funcBody2>adding ['<rept-funcBody2>', '<statement>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', '<statement>']. Token to read: LexToken(id,'f2',74,1281)
found rule to use: <statement> ->  <idnestid> <statementLF> 
popping <statement>adding ['<statementLF>', '<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestid>']. Token to read: LexToken(id,'f2',74,1281)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>', 'id']. Token to read: LexToken(id,'f2',74,1281)
popping terminal id
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>']. Token to read: LexToken(ASSIGN,'=',74,1284)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>']. Token to read: LexToken(ASSIGN,'=',74,1284)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', '<statementLF>', 'EPSILON']. Token to read: LexToken(ASSIGN,'=',74,1284)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', '<statementLF>']. Token to read: LexToken(ASSIGN,'=',74,1284)
found rule to use: <statementLF> ->  <assignOp> <expr> SEMICOLON 
popping <statementLF>adding ['SEMICOLON', '<expr>', '<assignOp>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', '<assignOp>']. Token to read: LexToken(ASSIGN,'=',74,1284)
found rule to use: <assignOp> ->  ASSIGN 
popping <assignOp>adding ['ASSIGN'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', 'ASSIGN']. Token to read: LexToken(ASSIGN,'=',74,1284)
popping terminal ASSIGN
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>']. Token to read: LexToken(id,'f2',74,1286)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<arithExpr>']. Token to read: LexToken(id,'f2',74,1286)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'f2',74,1286)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'f2',74,1286)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'f2',74,1286)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'f2',74,1286)
popping terminal id
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(DOT,'.',74,1288)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(DOT,'.',74,1288)
found rule to use: <rept-idnestLF0> ->  DOT id <idnestLFLF> <rept-idnestLF0> 
popping <rept-idnestLF0>adding ['<rept-idnestLF0>', '<idnestLFLF>', 'id', 'DOT'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<idnestLFLF>', 'id', 'DOT']. Token to read: LexToken(DOT,'.',74,1288)
popping terminal DOT
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<idnestLFLF>', 'id']. Token to read: LexToken(id,'build',74,1289)
popping terminal id
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<idnestLFLF>']. Token to read: LexToken(LPAREN,'(',74,1294)
found rule to use: <idnestLFLF> ->  LPAREN <aParams> RPAREN 
popping <idnestLFLF>adding ['RPAREN', '<aParams>', 'LPAREN'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<aParams>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',74,1294)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<aParams>']. Token to read: LexToken(MINUS,'-',74,1295)
found rule to use: <aParams> ->  <expr> <rept-aParams1> 
popping <aParams>adding ['<rept-aParams1>', '<expr>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<expr>']. Token to read: LexToken(MINUS,'-',74,1295)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<arithExpr>']. Token to read: LexToken(MINUS,'-',74,1295)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(MINUS,'-',74,1295)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(MINUS,'-',74,1295)
found rule to use: <factor> ->  <sign> <factor> 
popping <factor>adding ['<factor>', '<sign>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>', '<sign>']. Token to read: LexToken(MINUS,'-',74,1295)
found rule to use: <sign> ->  MINUS 
popping <sign>adding ['MINUS'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>', 'MINUS']. Token to read: LexToken(MINUS,'-',74,1295)
popping terminal MINUS
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(floatNum,'2.0',74,1296)
found rule to use: <factor> ->  floatNum 
popping <factor>adding ['floatNum'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'floatNum']. Token to read: LexToken(floatNum,'2.0',74,1296)
popping terminal floatNum
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(COMMA,',',74,1299)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(COMMA,',',74,1299)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(COMMA,',',74,1299)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', 'EPSILON']. Token to read: LexToken(COMMA,',',74,1299)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>']. Token to read: LexToken(COMMA,',',74,1299)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', 'EPSILON']. Token to read: LexToken(COMMA,',',74,1299)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>']. Token to read: LexToken(COMMA,',',74,1299)
found rule to use: <rept-aParams1> ->  <aParamsTail> <rept-aParams1> 
popping <rept-aParams1>adding ['<rept-aParams1>', '<aParamsTail>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<aParamsTail>']. Token to read: LexToken(COMMA,',',74,1299)
found rule to use: <aParamsTail> ->  COMMA <expr> 
popping <aParamsTail>adding ['<expr>', 'COMMA'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<expr>', 'COMMA']. Token to read: LexToken(COMMA,',',74,1299)
popping terminal COMMA
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<expr>']. Token to read: LexToken(floatNum,'1.0',74,1301)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<arithExpr>']. Token to read: LexToken(floatNum,'1.0',74,1301)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(floatNum,'1.0',74,1301)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(floatNum,'1.0',74,1301)
found rule to use: <factor> ->  floatNum 
popping <factor>adding ['floatNum'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'floatNum']. Token to read: LexToken(floatNum,'1.0',74,1301)
popping terminal floatNum
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(COMMA,',',74,1304)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(COMMA,',',74,1304)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(COMMA,',',74,1304)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', 'EPSILON']. Token to read: LexToken(COMMA,',',74,1304)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>']. Token to read: LexToken(COMMA,',',74,1304)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', 'EPSILON']. Token to read: LexToken(COMMA,',',74,1304)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>']. Token to read: LexToken(COMMA,',',74,1304)
found rule to use: <rept-aParams1> ->  <aParamsTail> <rept-aParams1> 
popping <rept-aParams1>adding ['<rept-aParams1>', '<aParamsTail>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<aParamsTail>']. Token to read: LexToken(COMMA,',',74,1304)
found rule to use: <aParamsTail> ->  COMMA <expr> 
popping <aParamsTail>adding ['<expr>', 'COMMA'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<expr>', 'COMMA']. Token to read: LexToken(COMMA,',',74,1304)
popping terminal COMMA
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<expr>']. Token to read: LexToken(floatNum,'0.0',74,1306)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<arithExpr>']. Token to read: LexToken(floatNum,'0.0',74,1306)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(floatNum,'0.0',74,1306)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(floatNum,'0.0',74,1306)
found rule to use: <factor> ->  floatNum 
popping <factor>adding ['floatNum'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'floatNum']. Token to read: LexToken(floatNum,'0.0',74,1306)
popping terminal floatNum
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(RPAREN,')',74,1309)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(RPAREN,')',74,1309)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(RPAREN,')',74,1309)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', 'EPSILON']. Token to read: LexToken(RPAREN,')',74,1309)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>']. Token to read: LexToken(RPAREN,')',74,1309)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', 'EPSILON']. Token to read: LexToken(RPAREN,')',74,1309)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>']. Token to read: LexToken(RPAREN,')',74,1309)
found rule to use: <rept-aParams1> ->  EPSILON 
popping <rept-aParams1>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',74,1309)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN']. Token to read: LexToken(RPAREN,')',74,1309)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(SEMICOLON,';',74,1310)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',74,1310)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(SEMICOLON,';',74,1310)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',74,1310)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(SEMICOLON,';',74,1310)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',74,1310)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>']. Token to read: LexToken(SEMICOLON,';',74,1310)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',74,1310)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',74,1310)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>']. Token to read: LexToken(id,'counter',75,1316)
found rule to use: <rept-funcBody2> ->  <statement> <rept-funcBody2> 
popping <rept-funcBody2>adding ['<rept-funcBody2>', '<statement>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', '<statement>']. Token to read: LexToken(id,'counter',75,1316)
found rule to use: <statement> ->  <idnestid> <statementLF> 
popping <statement>adding ['<statementLF>', '<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestid>']. Token to read: LexToken(id,'counter',75,1316)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>', 'id']. Token to read: LexToken(id,'counter',75,1316)
popping terminal id
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', '<statementLF>', '<idnestLF>']. Token to read: LexToken(ASSIGN,'=',75,1324)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', '<statementLF>', '<rept-idnestLF0>']. Token to read: LexToken(ASSIGN,'=',75,1324)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', '<statementLF>', 'EPSILON']. Token to read: LexToken(ASSIGN,'=',75,1324)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', '<statementLF>']. Token to read: LexToken(ASSIGN,'=',75,1324)
found rule to use: <statementLF> ->  <assignOp> <expr> SEMICOLON 
popping <statementLF>adding ['SEMICOLON', '<expr>', '<assignOp>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', '<assignOp>']. Token to read: LexToken(ASSIGN,'=',75,1324)
found rule to use: <assignOp> ->  ASSIGN 
popping <assignOp>adding ['ASSIGN'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>', 'ASSIGN']. Token to read: LexToken(ASSIGN,'=',75,1324)
popping terminal ASSIGN
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<expr>']. Token to read: LexToken(intNum,'1',75,1326)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<arithExpr>']. Token to read: LexToken(intNum,'1',75,1326)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(intNum,'1',75,1326)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(intNum,'1',75,1326)
found rule to use: <factor> ->  intNum 
popping <factor>adding ['intNum'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'intNum']. Token to read: LexToken(intNum,'1',75,1326)
popping terminal intNum
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(SEMICOLON,';',75,1327)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',75,1327)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(SEMICOLON,';',75,1327)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',75,1327)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<exprLF>']. Token to read: LexToken(SEMICOLON,';',75,1327)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'EPSILON']. Token to read: LexToken(SEMICOLON,';',75,1327)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',75,1327)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>']. Token to read: LexToken(while,'while',77,1335)
found rule to use: <rept-funcBody2> ->  <statement> <rept-funcBody2> 
popping <rept-funcBody2>adding ['<rept-funcBody2>', '<statement>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', '<statement>']. Token to read: LexToken(while,'while',77,1335)
found rule to use: <statement> ->  while LPAREN <relExpr> RPAREN <statBlock> SEMICOLON 
popping <statement>adding ['SEMICOLON', '<statBlock>', 'RPAREN', '<relExpr>', 'LPAREN', 'while'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<relExpr>', 'LPAREN', 'while']. Token to read: LexToken(while,'while',77,1335)
popping terminal while
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<relExpr>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',77,1340)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<relExpr>']. Token to read: LexToken(id,'counter',77,1341)
found rule to use: <relExpr> ->  <arithExpr> <relOp> <arithExpr> 
popping <relExpr>adding ['<arithExpr>', '<relOp>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<arithExpr>', '<relOp>', '<arithExpr>']. Token to read: LexToken(id,'counter',77,1341)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<arithExpr>', '<relOp>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'counter',77,1341)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<arithExpr>', '<relOp>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'counter',77,1341)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<arithExpr>', '<relOp>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'counter',77,1341)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<arithExpr>', '<relOp>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'counter',77,1341)
popping terminal id
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<arithExpr>', '<relOp>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(LEQ,'<=',77,1349)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<arithExpr>', '<relOp>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(LEQ,'<=',77,1349)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<arithExpr>', '<relOp>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(LEQ,'<=',77,1349)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<arithExpr>', '<relOp>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(LEQ,'<=',77,1349)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<arithExpr>', '<relOp>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(LEQ,'<=',77,1349)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<arithExpr>', '<relOp>', '<rightrec-arithExpr>']. Token to read: LexToken(LEQ,'<=',77,1349)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<arithExpr>', '<relOp>', 'EPSILON']. Token to read: LexToken(LEQ,'<=',77,1349)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<arithExpr>', '<relOp>']. Token to read: LexToken(LEQ,'<=',77,1349)
found rule to use: <relOp> ->  LEQ 
popping <relOp>adding ['LEQ'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<arithExpr>', 'LEQ']. Token to read: LexToken(LEQ,'<=',77,1349)
popping terminal LEQ
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<arithExpr>']. Token to read: LexToken(intNum,'10',77,1352)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(intNum,'10',77,1352)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(intNum,'10',77,1352)
found rule to use: <factor> ->  intNum 
popping <factor>adding ['intNum'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<rightrec-arithExpr>', '<rightrec-term>', 'intNum']. Token to read: LexToken(intNum,'10',77,1352)
popping terminal intNum
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(RPAREN,')',77,1354)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(RPAREN,')',77,1354)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', '<rightrec-arithExpr>']. Token to read: LexToken(RPAREN,')',77,1354)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',77,1354)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>', 'RPAREN']. Token to read: LexToken(RPAREN,')',77,1354)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', '<statBlock>']. Token to read: LexToken(do,'do',78,1362)
found rule to use: <statBlock> ->  do <rept-statBlock1> end 
popping <statBlock>adding ['end', '<rept-statBlock1>', 'do'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'do']. Token to read: LexToken(do,'do',78,1362)
popping terminal do
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>']. Token to read: LexToken(write,'write',79,1373)
found rule to use: <rept-statBlock1> ->  <statement> <rept-statBlock1> 
popping <rept-statBlock1>adding ['<rept-statBlock1>', '<statement>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', '<statement>']. Token to read: LexToken(write,'write',79,1373)
found rule to use: <statement> ->  write LPAREN <expr> RPAREN SEMICOLON 
popping <statement>adding ['SEMICOLON', 'RPAREN', '<expr>', 'LPAREN', 'write'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<expr>', 'LPAREN', 'write']. Token to read: LexToken(write,'write',79,1373)
popping terminal write
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<expr>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',79,1378)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<expr>']. Token to read: LexToken(id,'counter',79,1379)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<arithExpr>']. Token to read: LexToken(id,'counter',79,1379)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'counter',79,1379)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'counter',79,1379)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'counter',79,1379)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'counter',79,1379)
popping terminal id
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(RPAREN,')',79,1386)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(RPAREN,')',79,1386)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(RPAREN,')',79,1386)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(RPAREN,')',79,1386)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(RPAREN,')',79,1386)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(RPAREN,')',79,1386)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', 'EPSILON']. Token to read: LexToken(RPAREN,')',79,1386)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>']. Token to read: LexToken(RPAREN,')',79,1386)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',79,1386)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN']. Token to read: LexToken(RPAREN,')',79,1386)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',79,1387)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>']. Token to read: LexToken(write,'write',80,1397)
found rule to use: <rept-statBlock1> ->  <statement> <rept-statBlock1> 
popping <rept-statBlock1>adding ['<rept-statBlock1>', '<statement>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', '<statement>']. Token to read: LexToken(write,'write',80,1397)
found rule to use: <statement> ->  write LPAREN <expr> RPAREN SEMICOLON 
popping <statement>adding ['SEMICOLON', 'RPAREN', '<expr>', 'LPAREN', 'write'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<expr>', 'LPAREN', 'write']. Token to read: LexToken(write,'write',80,1397)
popping terminal write
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<expr>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',80,1402)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<expr>']. Token to read: LexToken(id,'f1',80,1403)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<arithExpr>']. Token to read: LexToken(id,'f1',80,1403)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'f1',80,1403)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'f1',80,1403)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'f1',80,1403)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'f1',80,1403)
popping terminal id
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(DOT,'.',80,1405)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(DOT,'.',80,1405)
found rule to use: <rept-idnestLF0> ->  DOT id <idnestLFLF> <rept-idnestLF0> 
popping <rept-idnestLF0>adding ['<rept-idnestLF0>', '<idnestLFLF>', 'id', 'DOT'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<idnestLFLF>', 'id', 'DOT']. Token to read: LexToken(DOT,'.',80,1405)
popping terminal DOT
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<idnestLFLF>', 'id']. Token to read: LexToken(id,'evaluate',80,1406)
popping terminal id
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<idnestLFLF>']. Token to read: LexToken(LPAREN,'(',80,1414)
found rule to use: <idnestLFLF> ->  LPAREN <aParams> RPAREN 
popping <idnestLFLF>adding ['RPAREN', '<aParams>', 'LPAREN'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<aParams>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',80,1414)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<aParams>']. Token to read: LexToken(id,'counter',80,1415)
found rule to use: <aParams> ->  <expr> <rept-aParams1> 
popping <aParams>adding ['<rept-aParams1>', '<expr>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<expr>']. Token to read: LexToken(id,'counter',80,1415)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<arithExpr>']. Token to read: LexToken(id,'counter',80,1415)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'counter',80,1415)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'counter',80,1415)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'counter',80,1415)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'counter',80,1415)
popping terminal id
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(RPAREN,')',80,1422)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(RPAREN,')',80,1422)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(RPAREN,')',80,1422)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(RPAREN,')',80,1422)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(RPAREN,')',80,1422)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(RPAREN,')',80,1422)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', 'EPSILON']. Token to read: LexToken(RPAREN,')',80,1422)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>']. Token to read: LexToken(RPAREN,')',80,1422)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', 'EPSILON']. Token to read: LexToken(RPAREN,')',80,1422)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>']. Token to read: LexToken(RPAREN,')',80,1422)
found rule to use: <rept-aParams1> ->  EPSILON 
popping <rept-aParams1>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',80,1422)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN']. Token to read: LexToken(RPAREN,')',80,1422)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(RPAREN,')',80,1423)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(RPAREN,')',80,1423)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(RPAREN,')',80,1423)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(RPAREN,')',80,1423)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(RPAREN,')',80,1423)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', 'EPSILON']. Token to read: LexToken(RPAREN,')',80,1423)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>']. Token to read: LexToken(RPAREN,')',80,1423)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',80,1423)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN']. Token to read: LexToken(RPAREN,')',80,1423)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',80,1424)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>']. Token to read: LexToken(write,'write',81,1434)
found rule to use: <rept-statBlock1> ->  <statement> <rept-statBlock1> 
popping <rept-statBlock1>adding ['<rept-statBlock1>', '<statement>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', '<statement>']. Token to read: LexToken(write,'write',81,1434)
found rule to use: <statement> ->  write LPAREN <expr> RPAREN SEMICOLON 
popping <statement>adding ['SEMICOLON', 'RPAREN', '<expr>', 'LPAREN', 'write'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<expr>', 'LPAREN', 'write']. Token to read: LexToken(write,'write',81,1434)
popping terminal write
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<expr>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',81,1439)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<expr>']. Token to read: LexToken(id,'f2',81,1440)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<arithExpr>']. Token to read: LexToken(id,'f2',81,1440)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'f2',81,1440)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'f2',81,1440)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'f2',81,1440)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'f2',81,1440)
popping terminal id
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(DOT,'.',81,1442)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(DOT,'.',81,1442)
found rule to use: <rept-idnestLF0> ->  DOT id <idnestLFLF> <rept-idnestLF0> 
popping <rept-idnestLF0>adding ['<rept-idnestLF0>', '<idnestLFLF>', 'id', 'DOT'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<idnestLFLF>', 'id', 'DOT']. Token to read: LexToken(DOT,'.',81,1442)
popping terminal DOT
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<idnestLFLF>', 'id']. Token to read: LexToken(id,'evaluate',81,1443)
popping terminal id
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', '<idnestLFLF>']. Token to read: LexToken(LPAREN,'(',81,1451)
found rule to use: <idnestLFLF> ->  LPAREN <aParams> RPAREN 
popping <idnestLFLF>adding ['RPAREN', '<aParams>', 'LPAREN'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<aParams>', 'LPAREN']. Token to read: LexToken(LPAREN,'(',81,1451)
popping terminal LPAREN
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<aParams>']. Token to read: LexToken(id,'counter',81,1452)
found rule to use: <aParams> ->  <expr> <rept-aParams1> 
popping <aParams>adding ['<rept-aParams1>', '<expr>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<expr>']. Token to read: LexToken(id,'counter',81,1452)
found rule to use: <expr> ->  <arithExpr> <exprLF> 
popping <expr>adding ['<exprLF>', '<arithExpr>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<arithExpr>']. Token to read: LexToken(id,'counter',81,1452)
found rule to use: <arithExpr> ->  <term> <rightrec-arithExpr> 
popping <arithExpr>adding ['<rightrec-arithExpr>', '<term>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<term>']. Token to read: LexToken(id,'counter',81,1452)
found rule to use: <term> ->  <factor> <rightrec-term> 
popping <term>adding ['<rightrec-term>', '<factor>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<factor>']. Token to read: LexToken(id,'counter',81,1452)
found rule to use: <factor> ->  <idnestid> 
popping <factor>adding ['<idnestid>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestid>']. Token to read: LexToken(id,'counter',81,1452)
found rule to use: <idnestid> ->  id <idnestLF> 
popping <idnestid>adding ['<idnestLF>', 'id'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>', 'id']. Token to read: LexToken(id,'counter',81,1452)
popping terminal id
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<idnestLF>']. Token to read: LexToken(RPAREN,')',81,1459)
found rule to use: <idnestLF> ->  <rept-idnestLF0> 
popping <idnestLF>adding ['<rept-idnestLF0>'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(RPAREN,')',81,1459)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(RPAREN,')',81,1459)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(RPAREN,')',81,1459)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(RPAREN,')',81,1459)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(RPAREN,')',81,1459)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>', 'EPSILON']. Token to read: LexToken(RPAREN,')',81,1459)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', '<exprLF>']. Token to read: LexToken(RPAREN,')',81,1459)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>', 'EPSILON']. Token to read: LexToken(RPAREN,')',81,1459)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', '<rept-aParams1>']. Token to read: LexToken(RPAREN,')',81,1459)
found rule to use: <rept-aParams1> ->  EPSILON 
popping <rept-aParams1>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',81,1459)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>', 'RPAREN']. Token to read: LexToken(RPAREN,')',81,1459)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', '<rept-idnestLF0>']. Token to read: LexToken(RPAREN,')',81,1460)
found rule to use: <rept-idnestLF0> ->  EPSILON 
popping <rept-idnestLF0>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>', 'EPSILON']. Token to read: LexToken(RPAREN,')',81,1460)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', '<rightrec-term>']. Token to read: LexToken(RPAREN,')',81,1460)
found rule to use: <rightrec-term> ->  EPSILON 
popping <rightrec-term>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>', 'EPSILON']. Token to read: LexToken(RPAREN,')',81,1460)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', '<rightrec-arithExpr>']. Token to read: LexToken(RPAREN,')',81,1460)
found rule to use: <rightrec-arithExpr> ->  EPSILON 
popping <rightrec-arithExpr>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>', 'EPSILON']. Token to read: LexToken(RPAREN,')',81,1460)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', '<exprLF>']. Token to read: LexToken(RPAREN,')',81,1460)
found rule to use: <exprLF> ->  EPSILON 
popping <exprLF>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN', 'EPSILON']. Token to read: LexToken(RPAREN,')',81,1460)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON', 'RPAREN']. Token to read: LexToken(RPAREN,')',81,1460)
popping terminal RPAREN
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',81,1461)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', '<rept-statBlock1>']. Token to read: LexToken(end,'end',82,1469)
found rule to use: <rept-statBlock1> ->  EPSILON 
popping <rept-statBlock1>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end', 'EPSILON']. Token to read: LexToken(end,'end',82,1469)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON', 'end']. Token to read: LexToken(end,'end',82,1469)
popping terminal end
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>', 'SEMICOLON']. Token to read: LexToken(SEMICOLON,';',82,1472)
popping terminal SEMICOLON
---------------------------------------------------------------
currentStack['$', 'end', '<rept-funcBody2>']. Token to read: LexToken(end,'end',83,1476)
found rule to use: <rept-funcBody2> ->  EPSILON 
popping <rept-funcBody2>adding ['EPSILON'] to stack
---------------------------------------------------------------
currentStack['$', 'end', 'EPSILON']. Token to read: LexToken(end,'end',83,1476)
popping terminal EPSILON
---------------------------------------------------------------
currentStack['$', 'end']. Token to read: LexToken(end,'end',83,1476)
popping terminal end


Parsing successful!